<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Let&#39;s move历险记</title>
      <link href="/2024/06/06/let-s-move-li-xian-ji/"/>
      <url>/2024/06/06/let-s-move-li-xian-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Let’s-move历险记"><a href="#Let’s-move历险记" class="headerlink" title="Let’s move历险记"></a>Let’s move历险记</h1><p>本文为参加Let‘s move项目的经历，记录一下走过的路踩过的坑，毕竟是第一次，希望自己能坚持下去。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://docs.sui.io/guides/developer/getting-started/sui-install">安装指南</a>，但是我没有brew，所以先得装这个玩意。</p><p>理论上用第一行的指令就可以安装，但是不知道为什么我除了ping之外别的都死活连不上github，无奈就采用了一个国内镜像的安装脚本（第二行）。这个脚本应该是很强的路人做的，粗糙但还算好用，如果遇到了什么问题可能可以看<a href="https://gitee.com/cunkai/HomebrewCN/blob/master/error.md">这里</a>。我在安装的时候装一半报错了，具体发生了什么不知道，我只能说我先在未sudo的情况下运行了脚本安装了brew，然后sudo运行了一次配置国内镜像软件源和&#x2F;etc&#x2F;profile（环境变量）。两次都报错终止，最后重启虚拟机，再运行第三行检查是否安装完成，得到了肯定的回复……</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;bin&#x2F;bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;HEAD&#x2F;install.sh)&quot;&#x2F;bin&#x2F;bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;gitee.com&#x2F;cunkai&#x2F;HomebrewCN&#x2F;raw&#x2F;master&#x2F;Homebrew.sh)&quot;brew -vbrew install suibrew list suibrew install curl cmake libpq gitcargo install --git https:&#x2F;&#x2F;github.com&#x2F;movebit&#x2F;move --branch sui_move_analyzer sui-move-analyzer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外还有高手，在运行第四行正儿八经的安装sui的时候，brew开始自动更新，等了一会儿没动静，不耐烦了Ctrl+C切一下进程，结果好像是切掉了更新brew的进程，并且顺利地开始了sui的下载……反正挺让人沉默的。最后第五行检查一下你下载好了没有。（事实上等足够长时间的话，总会更新完的，只不过没耐心可以这么干着先，就第一次比较慢）</p><p>然后根据这个<a href="https://learnblockchain.cn/article/7691">blog</a>，安装依赖（第六行），安装vscode插件和同名服务（第七行）。</p><blockquote><p>说回第一行的问题，因为后面总是要用到github的，不能老是依赖不全的镜像站，所以还是想找个办法，可以看<a href="https://blog.csdn.net/u011700186/article/details/109452684">链接</a>，将两个DNS Server放在默认的前面，这样我就可以避开所谓的DNS污染，连上github了……如果早点设置这个，可能就没那么多事情了</p><p>还有llvm这个库好像用brew死活下不下来，就用apt了，反正是个依赖</p><pre class="line-numbers language-none"><code class="language-none">sudo apt updatesudo apt install llvmexport LD_LIBRARY_PATH&#x3D;$LD_LIBRARY_PATH:&#x2F;usr&#x2F;lib&#x2F;llvm-10&#x2F;lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而且事情还没完，本来这个llvm库里面应该有个clang的，这会儿找不到了。但是观察报错信息是找不到<code>libclang.so</code>，这是 Clang 编译器的一部分。</p><pre class="line-numbers language-none"><code class="language-none">sudo apt install clangwhich clang#&#x2F;usr&#x2F;bin&#x2F;clang#然而，libclang.so 是 clang 的库文件，通常位于 &#x2F;usr&#x2F;lib 或 &#x2F;usr&#x2F;local&#x2F;lib 目录下。find &#x2F;usr -name &quot;libclang.so*&quot;#&#x2F;usr&#x2F;lib&#x2F;llvm-14&#x2F;lib&#x2F;libclang.so.1export LIBCLANG_PATH&#x3D;&#x2F;usr&#x2F;lib&#x2F;llvm-14&#x2F;lib&#x2F;#验证确实能找到libclangecho $LIBCLANG_PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>后面一路顺风，虽然一次执行<code>cargo install --git https://github.com/movebit/move --branch sui_move_analyzer sui-move-analyzer</code>需要超过10分钟，但是不报错就还是能玩的。</p><p>另外还有一步是在<a href="https://learnblockchain.cn/article/7692">链接</a>看到的，把<a href="https://github.com/MystenLabs/sui">sui项目</a>fork之后克隆到本地。</p><h2 id="配置客户端信息"><a href="#配置客户端信息" class="headerlink" title="配置客户端信息"></a>配置客户端信息</h2><p>其实是先开个测试网</p><pre class="line-numbers language-none"><code class="language-none">move@move-virtual-machine:~&#x2F;Desktop&#x2F;move$ sui client addresses Config file [&quot;&#x2F;home&#x2F;move&#x2F;.sui&#x2F;sui_config&#x2F;client.yaml&quot;] doesn&#39;t exist, do you want to connect to a Sui Full node server [y&#x2F;N]?ySui Full node server URL (Defaults to Sui Testnet if not specified) : Select key scheme to generate keypair (0 for ed25519, 1 for secp256k1, 2: for secp256r1):0Keys saved as Base64 with 33 bytes &#96;flag || privkey&#96; ($BASE64_STR).         To see Bech32 format encoding, use &#96;sui keytool export $SUI_ADDRESS&#96; where         $SUI_ADDRESS can be found with &#96;sui keytool list&#96;. Or use &#96;sui keytool convert $BASE64_STR&#96;.Generated new keypair and alias for address with scheme &quot;ed25519&quot; [elegant-axinite: 0x254bd209e00d2ef32ea5640fa629d0c19e971825f0ea1910573e04a348eb4e15]Secret Recovery Phrase : [abuse essay horror exact decorate owner mimic dwarf purse dolphin inside original]╭─────────────────┬────────────────────────────────────────────────────────────────────┬────────────────╮│ alias           │ address                                                            │ active address │├─────────────────┼────────────────────────────────────────────────────────────────────┼────────────────┤│ elegant-axinite │ 0x254bd209e00d2ef32ea5640fa629d0c19e971825f0ea1910573e04a348eb4e15 │ *              │╰─────────────────┴────────────────────────────────────────────────────────────────────┴────────────────╯<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我输入的是sui client addresses、y、0.</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda个人手册</title>
      <link href="/2024/05/16/anaconda-ge-ren-shou-ce/"/>
      <url>/2024/05/16/anaconda-ge-ren-shou-ce/</url>
      
        <content type="html"><![CDATA[<h1 id="Anaconda个人手册"><a href="#Anaconda个人手册" class="headerlink" title="Anaconda个人手册"></a>Anaconda个人手册</h1><p><a href="https://blog.csdn.net/qq_45281589/article/details/134597810">安装方式</a>，这篇文章安装的没什么问题。大部分dubug依赖于智谱清言，在此给清华爷磕一个。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>访问Anaconda的<a href="https://www.anaconda.com/products/individual">官方网站</a>，下载适用于Windows的Anaconda安装程序。当然清华源等的镜像也是很好的。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在安装类型中选择了for all users。一般来说选择just me &#x2F; all users会影响的因素只有在环境变量中对应的用户变量和系统变量。其实问题都不大。</p><p><img src="D:/vblog/source/_posts/assets/image-20240516155649713.png" alt="image-20240516155649713"></p><p>下方列出了几个选项：</p><ul><li>“Create start menu shortcuts (supported packages only).”（创建开始菜单快捷方式（仅支持包）。）</li><li>“Register Anaconda3 as the system Python 3.11.”（注册Anaconda3为系统Python 3.11。）<ul><li>下面的注释提到这是推荐的，允许其他程序，如VSCode、PyCharm等自动检测Anaconda3作为系统的主要Python 3.11。</li></ul></li><li>“Clear the package cache upon completion”（完成时清除包缓存）<ul><li>下面的注释提到这是推荐的，可以在不损害功能的情况下恢复一些磁盘空间。</li></ul></li></ul><p>我是按照这张图的方式勾选的。但是事实上安装完成后我发现这次anaconda并没有把自己的路径放到系统环境变量或者用户环境变量上。可能是因为我反复安装或者其他的原因。</p><h2 id="手动配置环境变量"><a href="#手动配置环境变量" class="headerlink" title="手动配置环境变量"></a>手动配置环境变量</h2><p>打开环境变量页，选择系统环境变量</p><blockquote><p>这个选择是因为我之前把环境变量放在了用户环境变量中，但是vscode就只选择默认的python版本了，无法切换，约等于我安装了个更麻烦的python</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json">E<span class="token operator">:</span>\anacondaE<span class="token operator">:</span>\anaconda\ScriptsE<span class="token operator">:</span>\anaconda\Library\bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将anaconda的路径中这三部分加入环境变量中。（我的anaconda放在了E盘，需要按照具体情况调整）</p><h2 id="测试python"><a href="#测试python" class="headerlink" title="测试python"></a>测试python</h2><p>这个时候可以说anaconda应该被装好的了，先试一下python功能。</p><p>打开powershell（如果这是你以后最常用的命令行），将下面的命令输入。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">conda --versionconda infoactivatepython<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果都没有报错的样子的话，就算python安装好了。这应该会是anaconda中最新的python版本，如果对python版本没有更多要求的可以考虑就到这里结束配置环节了。</p><h2 id="改变python版本"><a href="#改变python版本" class="headerlink" title="改变python版本"></a>改变python版本</h2><p>Anaconda是一个广泛用于数据科学和机器学习的Python发行版，它简化了Python环境和库的管理。本指南将带你逐步完成Anaconda的安装过程，并介绍基本的环境配置。</p><p>事实上conda install库的速度远远不如pip，相信大家如果不是纯新手被推荐了anaconda的话，应该是苦于电脑里面不同版本的python打架而选择的anaconda。</p><p>比如我想要用anaconda创建一个Python 2.7的环境，基本操作步骤如下：</p><hr><ol><li>打开命令提示符（Windows）或终端（macOS&#x2F;Linux）。</li><li>使用以下命令创建一个新的环境，并将其命名为<code>python27</code>（名称可自选）：<pre class="line-numbers language-none"><code class="language-none">conda create --name python27 python&#x3D;2.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>这将创建一个名为<code>python27</code>的新环境，并在其中安装Python 2.7。</li><li>激活新创建的环境：<ul><li>在Windows上，使用以下命令：<pre class="line-numbers language-none"><code class="language-none">conda activate python27<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>在macOS或Linux上，使用以下命令：<pre class="line-numbers language-none"><code class="language-none">source activate python27<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li>现在，您已经处于名为<code>python27</code>的环境中，可以使用Python 2.7了。您可以使用以下命令验证Python版本：<pre class="line-numbers language-none"><code class="language-none">python --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>这应该显示Python 2.7.x，其中<code>x</code>是具体的小版本号。</li><li>如果您想退出环境，可以使用以下命令：<pre class="line-numbers language-none"><code class="language-none">conda deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>现在，您已经成功创建了一个Python 2.7环境，并可以在其中运行Python 2.7代码。</li></ol><hr><p>（以上整段复制自智谱清言）</p><h2 id="powershell脚本执行策略修改"><a href="#powershell脚本执行策略修改" class="headerlink" title="powershell脚本执行策略修改"></a>powershell脚本执行策略修改</h2><p>我遇到的情况就是，走完上述流程，全程没有报错，但是最后python版本还是3.11没有变化。</p><p>还好第二次安装的anaconda后，powershell会给我报错了，据此我才能一步步改正。</p><p>首先好像在<code>conda activate python27</code>之前，我应该进行一次conda init</p><hr><p><code>conda init</code> 是一个命令，用于在您的 shell 中初始化 Conda。当您运行 <code>conda init</code> 时，它会修改您的 shell 配置文件（例如 <code>.bashrc</code>、<code>.bash_profile</code>、<code>.zshrc</code>、<code>config.fish</code> 或 <code>profile.ps1</code>），以便在每次打开新的 shell 终端时自动配置 Conda 环境。<br>具体来说，<code>conda init</code> 命令会执行以下操作：</p><ol><li><strong>添加 Conda 的初始化脚本</strong>：这通常是一个小的脚本科添加到您的 shell 配置文件中，它会在您打开新的 shell 终端时自动执行。</li><li><strong>修改 PATH 环境变量</strong>：初始化脚本会确保 Conda 的可执行文件目录（例如 <code>bin</code> 或 <code>Scripts</code> 目录）被添加到您的 PATH 环境变量中，这样您就可以直接运行 Conda 和其他 Conda 安装的命令。</li><li><strong>添加 Conda 命令自动补全</strong>：在某些 shell 中，<code>conda init</code> 还会添加命令自动补全功能，这可以提高您使用 Conda 的效率。</li><li><strong>添加 Conda 环境 activation 脚本</strong>：这允许您使用 <code>conda activate</code> 命令来激活 Conda 环境，以及使用 <code>conda deactivate</code> 命令来退出环境。<br> 在 Windows 上，<code>conda init</code> 会修改 PowerShell 的配置文件 <code>profile.ps1</code>，以便在 PowerShell 中提供上述功能。在 Linux 和 macOS 上，它会修改相应的 shell 配置文件。<br> 如果您在运行 <code>conda init</code> 后遇到了问题，可能需要检查您的 shell 配置文件，确保没有冲突或错误。如果您的配置文件中有错误，可能会导致 shell 无法正常加载，或者 Conda 命令无法正常工作。在这种情况下，您可能需要手动编辑配置文件来修复问题。</li></ol><hr><p>而在进行<code>conda init</code> 命令时，powershell拒绝了。在 Windows 上，PowerShell 有一个执行策略，用于控制是否允许运行脚本。默认情况下，执行策略通常是设置为“Restricted”，这意味着不允许运行任何脚本。</p><p>解决方案是：</p><hr><ol><li><p><strong>以管理员身份打开 PowerShell</strong>：</p><ul><li>右键点击开始菜单或 PowerShell 的快捷方式，选择“以管理员身份运行”。</li></ul></li><li><p><strong>查看当前的执行策略</strong>：</p><ul><li>在 PowerShell 中运行以下命令：<pre class="line-numbers language-none"><code class="language-none">Get-ExecutionPolicy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>这将显示当前的执行策略。</li></ul></li><li><p><strong>更改执行策略</strong>：</p><ul><li>要允许运行您自己的脚本，可以使用以下命令将执行策略更改为“RemoteSigned”：<pre class="line-numbers language-none"><code class="language-none">Set-ExecutionPolicy RemoteSigned<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>“RemoteSigned”策略允许运行本地脚本，同时要求远程脚本（例如从互联网下载的脚本）必须由受信任的发布者签名。</li></ul></li><li><p><strong>如果您只想为当前会话更改策略</strong>，可以使用以下命令：</p>  <pre class="line-numbers language-none"><code class="language-none">Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>这将对当前用户的应用程序配置文件设置执行策略，而不会影响其他用户的设置。</li></ul></li><li><h2 id="如果您需要运行完全不受限制的脚本，可以将策略更改为“Unrestricted”，但请注意这样做可能会带来安全风险："><a href="#如果您需要运行完全不受限制的脚本，可以将策略更改为“Unrestricted”，但请注意这样做可能会带来安全风险：" class="headerlink" title="如果您需要运行完全不受限制的脚本，可以将策略更改为“Unrestricted”，但请注意这样做可能会带来安全风险：  "></a><strong>如果您需要运行完全不受限制的脚本</strong>，可以将策略更改为“Unrestricted”，但请注意这样做可能会带来安全风险：<br>  <pre class="line-numbers language-none"><code class="language-none">Set-ExecutionPolicy Unrestricted<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></h2></li></ol><p>我选择了3.1的策略。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>不知道为什么，可能是电脑问题？我发现我的电脑上所有的文件夹都是只读的，而且试图取消的时候，属性框会连着进度条闪退。只能去管理员powershell去安装库了。</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
          <category> install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex个人手册</title>
      <link href="/2024/05/12/latex-ge-ren-shou-ce/"/>
      <url>/2024/05/12/latex-ge-ren-shou-ce/</url>
      
        <content type="html"><![CDATA[<h1 id="Latex"><a href="#Latex" class="headerlink" title="Latex"></a>Latex</h1><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="普通插图"><a href="#普通插图" class="headerlink" title="普通插图"></a>普通插图</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">figure</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>ht<span class="token punctuation">]</span><span class="token function selector">\label</span><span class="token punctuation">&#123;</span><span class="token keyword">fig:01</span><span class="token punctuation">&#125;</span><span class="token function selector">\small</span><span class="token function selector">\centering</span><span class="token function selector">\includegraphics</span><span class="token punctuation">[</span>width=12cm<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>mcm-fig-1.pdf<span class="token punctuation">&#125;</span><span class="token function selector">\caption</span><span class="token punctuation">&#123;</span>The Curve Plane of System with form of pdf<span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">figure</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">figure</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>htpb<span class="token punctuation">]</span><span class="token function selector">\label</span><span class="token punctuation">&#123;</span><span class="token keyword">fig:02</span><span class="token punctuation">&#125;</span><span class="token function selector">\small</span><span class="token function selector">\centering</span><span class="token function selector">\includegraphics</span><span class="token punctuation">[</span>scale=0.5<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>mcm-fig-2.eps<span class="token punctuation">&#125;</span><span class="token function selector">\caption</span><span class="token punctuation">&#123;</span>The Curve Plane of System with form of eps<span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">figure</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="并排插图"><a href="#并排插图" class="headerlink" title="并排插图"></a>并排插图</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">figure</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>htbp<span class="token punctuation">]</span><span class="token function selector">\centering</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">minipage</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>.35<span class="token function selector">\textwidth</span><span class="token punctuation">&#125;</span><span class="token function selector">\includegraphics</span><span class="token punctuation">[</span>scale=.225<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>Fig1.jpg<span class="token punctuation">&#125;</span><span class="token function selector">\par</span><span class="token function selector">\vspace</span><span class="token punctuation">&#123;</span>0pt<span class="token punctuation">&#125;</span><span class="token comment">%\caption&#123;&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">minipage</span><span class="token punctuation">&#125;</span><span class="token function selector">\hspace</span><span class="token punctuation">&#123;</span>1cm<span class="token punctuation">&#125;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">minipage</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>.35<span class="token function selector">\textwidth</span><span class="token punctuation">&#125;</span><span class="token function selector">\includegraphics</span><span class="token punctuation">[</span>scale=.3<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>Fig2.png<span class="token punctuation">&#125;</span><span class="token function selector">\par</span><span class="token function selector">\vspace</span><span class="token punctuation">&#123;</span>0pt<span class="token punctuation">&#125;</span><span class="token comment">%\caption&#123;&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">minipage</span><span class="token punctuation">&#125;</span><span class="token function selector">\caption</span><span class="token punctuation">&#123;</span>Comparison<span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">figure</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>htbp</code>是浮动体选项，用于控制浮动对象（如图片或表格）的排列位置。它是由以下四个字母组成的缩写：</p><ul><li><code>h</code> 表示 “here”，即浮动体应该尽量在它所在的位置排列。</li><li><code>t</code> 表示 “top”，即浮动体应该排在页面的顶部。</li><li><code>b</code> 表示 “bottom”，即浮动体应该排在页面的底部。</li><li><code>p</code> 表示 “page”，即浮动体应该放在一只允许有浮动对象的页面上。</li></ul></blockquote><blockquote><p><code>\begin&#123;minipage&#125;[b\]&#123;.35\textwidth&#125;</code> 中的 <code>&#123;.35\textwidth&#125;</code> 表示 <code>minipage</code> 的宽度，其中 <code>.35\textwidth</code> 表示 <code>minipage</code> 的宽度为当前页面宽度的 35%。你可以根据需要调整这个值，例如，如果你想让 <code>minipage</code> 的宽度为当前页面宽度的 50%，你可以将 <code>&#123;.35\textwidth&#125;</code> 改为 <code>&#123;.5\textwidth&#125;</code>]</p></blockquote><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">table</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>htbp<span class="token punctuation">]</span><span class="token function selector">\centering</span><span class="token function selector">\caption</span><span class="token punctuation">&#123;</span>Data Anomalies<span class="token punctuation">&#125;</span><span class="token function selector">\label</span><span class="token punctuation">&#123;</span><span class="token keyword">Data Anomalies</span><span class="token punctuation">&#125;</span><span class="token comment">%\begin&#123;tabular&#125;&#123;|l|l|l|l|l|&#125;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">tabular</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>|c|c|c|c|c|<span class="token punctuation">&#125;</span><span class="token function selector">\hline</span>  <span class="token punctuation">&amp;</span> match<span class="token function selector">\_</span>id <span class="token punctuation">&amp;</span> player1 <span class="token punctuation">&amp;</span> player2 <span class="token punctuation">&amp;</span> elapsed<span class="token function selector">\_</span>time <span class="token function selector">\\</span> <span class="token function selector">\hline</span> 586 <span class="token punctuation">&amp;</span> 2023-wimbledon-1303 <span class="token punctuation">&amp;</span> Frances Tiafoe <span class="token punctuation">&amp;</span> Grigor Dimitrov <span class="token punctuation">&amp;</span> 24:56:34 <span class="token function selector">\\</span> <span class="token function selector">\hline</span> 587 <span class="token punctuation">&amp;</span> 2023-wimbledon-1303 <span class="token punctuation">&amp;</span> Frances Tiafoe <span class="token punctuation">&amp;</span> Grigor Dimitrov <span class="token punctuation">&amp;</span> 24:57:00 <span class="token function selector">\\</span> <span class="token function selector">\hline</span> 588 <span class="token punctuation">&amp;</span> 2023-wimbledon-1303 <span class="token punctuation">&amp;</span> Frances Tiafoe <span class="token punctuation">&amp;</span> Grigor Dimitrov <span class="token punctuation">&amp;</span> 24:57:30 <span class="token function selector">\\</span> <span class="token function selector">\hline</span> 589 <span class="token punctuation">&amp;</span> 2023-wimbledon-1303 <span class="token punctuation">&amp;</span> Frances Tiafoe <span class="token punctuation">&amp;</span> Grigor Dimitrov <span class="token punctuation">&amp;</span> 24:58:22 <span class="token function selector">\\</span> <span class="token function selector">\hline</span> ... <span class="token punctuation">&amp;</span> ... <span class="token punctuation">&amp;</span>  <span class="token punctuation">&amp;</span>  <span class="token punctuation">&amp;</span>  <span class="token function selector">\\</span> <span class="token function selector">\hline</span> 635 <span class="token punctuation">&amp;</span> 2023-wimbledon-1303 <span class="token punctuation">&amp;</span> Frances Tiafoe <span class="token punctuation">&amp;</span> Grigor Dimitrov <span class="token punctuation">&amp;</span> 25:37:17 <span class="token function selector">\\</span> <span class="token function selector">\hline</span> 636 <span class="token punctuation">&amp;</span> 2023-wimbledon-1303 <span class="token punctuation">&amp;</span> Frances Tiafoe <span class="token punctuation">&amp;</span> Grigor Dimitrov <span class="token punctuation">&amp;</span> 25:37:54 <span class="token function selector">\\</span> <span class="token function selector">\hline</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">tabular</span><span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">table</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三线表"><a href="#三线表" class="headerlink" title="三线表"></a>三线表</h2><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">table</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">center</span><span class="token punctuation">&#125;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">tabular</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>p<span class="token punctuation">&#123;</span>60pt<span class="token punctuation">&#125;</span>p<span class="token punctuation">&#123;</span>180pt<span class="token punctuation">&#125;</span>p<span class="token punctuation">&#123;</span>180pt<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function selector">\toprule</span>Symbol     <span class="token punctuation">&amp;</span> Decription <span class="token punctuation">&amp;</span> Example<span class="token function selector">\\</span><span class="token function selector">\midrule</span>x1     <span class="token punctuation">&amp;</span> Whether or not you are the server.  <span class="token punctuation">&amp;</span> 1: player 1, 2: player 2 <span class="token function selector">\\</span>x2     <span class="token punctuation">&amp;</span> Decription  <span class="token punctuation">&amp;</span> 0,1 <span class="token function selector">\\</span>x3     <span class="token punctuation">&amp;</span> Decription  <span class="token punctuation">&amp;</span> 0,1 <span class="token function selector">\\</span><span class="token function selector">\bottomrule</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">tabular</span><span class="token punctuation">&#125;</span><span class="token function selector">\caption</span><span class="token punctuation">&#123;</span>Key notations used in this paper<span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">center</span><span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">table</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>有些外国期刊有标题下首段不缩进的惯例，不要大惊小怪。</p><p>数学类的报告大多数使用点号“．”，而不使用句号“。”，因此请大家在使用合理的标点符号，或按指导教师要求使用正确的标点符号．特别说明：点号是英文输入法下的全角句号．</p><p>如果在输入中文文字中间有空格，则空格会占位并输出到最终的<del>pdf</del>文件中．但是，如果有多个连续的空格，则按一个空格对待．因此，建议大家不要在中文文字中间加入空格．另外，为了排版好看，建议在中文和英文之间加一波浪线（表示空格）</p><h2 id="关于安装碎碎念"><a href="#关于安装碎碎念" class="headerlink" title="关于安装碎碎念"></a>关于安装碎碎念</h2><p>目前来说，有tex live和mik tex两种主要的tex。两者的区别可以见于这篇<a href="https://www.cnblogs.com/liuliang1999/p/12656706.html">翻译</a>。我一开始是选择了texlive+vscode的方案，我很喜欢vscode的界面（可以在csdn上面找到对应的教程）。但是我们学校的老师很喜欢用自己设计的模板，然后我就老是没办法编译学校的模板，这种情况时不时发生，说实话我也不记得我之前是怎么解决的了，反正就是解决了，极其抽象。而且这种编译方案时不时爆雷，两次数模比赛的最后几个小时给我上演怎么都无法编译的神奇操作，虽说最后都有惊无险，但是给人非常不好的体验。</p><p>这次头脑一热去和老师battle，老师还是耐住性子叫我装CTex，虽然两者不能共存于一个系统中，但为了水过去课程设计还是选择了换。现在是可以编译老师给的模板了，但是又出现了几个问题，不知道怎么回事。</p><ol><li>CTex套装只有winedt可以打开，miktex和texworks这俩大爷打开的时候就说不能初始化qt平台。好像也没人讨论这个问题，总不能是打开就意味着我要优化这个软件吧（虽说好像确实不需要打开）……不太了解Qt platform。</li><li>以前有一篇特别长的论文现在没办法编译了，CTex终端里面就留下了一个问号然后卡死了，不是哥们你一段程序在这里扣问号我怎么办？你问我我问谁？</li><li>另外是个奇怪的事情，vscode里面关于texlive的扩展部分没删除，经过测试发现无缝衔接上了miktex。但是 另外一篇论文，同样是用CTex套件编译，在winedt里面可以，但是在vscode中报错……</li></ol><p>这里面水有点深，我只能说能用就行……</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://zhuanlan.zhihu.com/p/166523064">https://zhuanlan.zhihu.com/p/166523064</a></p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
          <category> install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/03/09/san-lun-ge-lattice-3/"/>
      <url>/2024/03/09/san-lun-ge-lattice-3/</url>
      
        <content type="html"><![CDATA[<h1 id="三论格LATTICE-3"><a href="#三论格LATTICE-3" class="headerlink" title="三论格LATTICE_3"></a>三论格LATTICE_3</h1><blockquote><p><a href="https://www.zhihu.com/column/c_1312093478458458112">格密码理论与应用实践</a></p></blockquote><p>[TOC]</p><h2 id="1-Lattices"><a href="#1-Lattices" class="headerlink" title="1. Lattices"></a>1. Lattices</h2><h3 id="Lattices定义"><a href="#Lattices定义" class="headerlink" title="Lattices定义"></a>Lattices定义</h3><p>给定n个线性无关向量$b_1,b_2,…,b_n \in R^m$，由它们产生的格被定义为<br>$$<br>L(b_1,b_2,…,b_n)&#x3D;{\sum{x_i}b_i|x_i \in Z}<br>$$<br>这n个向量$b_i,i&#x3D;1,2,…,n$就是格的基。</p><p>等价地，也可以把向量作为列连成矩阵，把X作为一个n维列向量。<br>$$<br>L(B)&#x3D;{Bx|x\in Z^n}<br>$$<br>n为格的秩，m为格的维数，n&#x3D;m为满格。我们暂时只考虑满格。</p><blockquote><p>事实上，B的列向量线性无关，因此其列秩为n，因此秩为n。</p></blockquote><h3 id="SPAN"><a href="#SPAN" class="headerlink" title="SPAN"></a>SPAN</h3><p>格基向量张成的空间<br>$$<br>span(L(B))&#x3D;span(B)&#x3D;{By|y\in R^n}<br>$$</p><h3 id="Basic-Parallelepiped基础区域"><a href="#Basic-Parallelepiped基础区域" class="headerlink" title="Basic Parallelepiped基础区域"></a>Basic Parallelepiped基础区域</h3><p>$$<br>P(B)&#x3D;{Bx|0&lt;&#x3D;x&lt;1}<br>$$</p><h3 id="Tiling-Span"><a href="#Tiling-Span" class="headerlink" title="Tiling Span"></a>Tiling Span</h3><p>在每一个格点放置一个P(B)副本，得到整个tiling span</p><h3 id="Lemma1"><a href="#Lemma1" class="headerlink" title="Lemma1"></a>Lemma1</h3><p>基础区域不应包含除了远点外的任何格点（x的左闭右开式一个细节）</p><p>设$\Lambda$为秩n的格，设$b_i\in \Lambda,i&#x3D;1,2,…,n$为n个线性无关的格向量。则$b_i,i&#x3D;1,2,…,n$表示为格的基，当且仅当$P(b_1,b_2,…,b_n)\cap\Lambda&#x3D;0$事实上这个0应指代零向量。</p><h3 id="幺模矩阵"><a href="#幺模矩阵" class="headerlink" title="幺模矩阵"></a>幺模矩阵</h3><p>设U为n阶方阵，行列式绝对值为1，则称为幺模矩阵。</p><h3 id="Lemma2"><a href="#Lemma2" class="headerlink" title="Lemma2"></a>Lemma2</h3><p>幺模矩阵的逆也是幺模矩阵，而且求逆元对$Z^n$封闭。</p><h3 id="Lemma3"><a href="#Lemma3" class="headerlink" title="Lemma3"></a>Lemma3</h3><p>两组基B1B2等价，当且仅当B2&#x3D;B1U，其中U为某个幺模矩阵。</p><h3 id="Lemma4"><a href="#Lemma4" class="headerlink" title="Lemma4"></a>Lemma4</h3><p>两组基等价，当且仅当一组基可以通过对列向量进行一下操作从另一组基获得：</p><ol><li>$b_i\leftarrow b_i+kb_j,k\in Z$</li><li>$b_i \leftrightarrow b_j$</li><li>$b_i\leftarrow -b_i$</li></ol><h3 id="Determinant行列式"><a href="#Determinant行列式" class="headerlink" title="Determinant行列式"></a>Determinant行列式</h3><p>$\Lambda&#x3D;L(B)$为秩n的格，定义行列式$det(\Lambda)&#x3D;\sqrt{det(B^TB)}$</p><p>在格中行列式与基的选取无关。行列式越小，格的密度越大。如果我们在格中取一个很大的球体K，那么K中的个点数接近于$vol(K)&#x2F;det(\Lambda)$。其意义可以近似理解为是求体积除以单位体积。</p><h2 id="2-Gram-Schmidt-Orthogonalization-GSO"><a href="#2-Gram-Schmidt-Orthogonalization-GSO" class="headerlink" title="2. Gram-Schmidt Orthogonalization(GSO)"></a>2. Gram-Schmidt Orthogonalization(GSO)</h2><blockquote><p>施密特正交化</p></blockquote><p>对于n个线性无关向量$b_1,b_2,…,b_n$序列（不是集合），我们将它们的GSO设为$\tilde{b}_1,\tilde{b}_2,…,\tilde{b}<em>n$序列。<br>$$<br>\tilde{b}<em>i&#x3D;b_i-\sum^{i-1}</em>{j-1}\mu</em>{i,j}\tilde{b}<em>j,where;\mu</em>{i,j}&#x3D;\frac{\langle b_i,\tilde{b}_j\rangle}{\langle \tilde{b}_j,\tilde{b}_j\rangle}<br>$$<br>这部分是高等代数的知识，有一些简单的特性：</p><ul><li>任意$i\neq j$，有$\langle \tilde{b}_i,\tilde{b}_j\rangle&#x3D;0$</li><li>两个序列张成的空间等价</li><li>GSO序列不需要是格的基，一般甚至不包括在格中</li><li>顺序很重要，因此是序列不是集合。</li></ul><h2 id="3-Successive-minima逐次最小长度"><a href="#3-Successive-minima逐次最小长度" class="headerlink" title="3. Successive minima逐次最小长度"></a>3. Successive minima逐次最小长度</h2><h3 id="范数与长度"><a href="#范数与长度" class="headerlink" title="范数与长度"></a>范数与长度</h3><p>长度指的是欧几里得范数，或者$l_2$范数，定义为$||x||_2&#x3D;\sqrt{\sum x_i^2}$。关于范数，可能会用到$l_1$范数$||x||_1&#x3D;{\sum |x_i|}$或者$l_\infty$范数$||x||_\infty&#x3D;max|x_i|$</p><p>格有一个基本参数$\lambda_1$是格中最短非零向量的长度。</p><h3 id="第i个逐次最小长度"><a href="#第i个逐次最小长度" class="headerlink" title="第i个逐次最小长度"></a>第i个逐次最小长度</h3><p>设$\Lambda$为秩n的格，对于$i&#x3D;1,2,…,n$，可以定义第i个逐次最小长度为<br>$$<br>\lambda_i(\Lambda)&#x3D;inf{r|dim(span(\Lambda\cap\bar{B}(0,r)))\geq i}<br>$$<br>其中$\bar{B}(0,r)&#x3D;{x\in rm|;||x||\leq r}$是半径r原点O左右的close ball。</p><h3 id="theorem-5"><a href="#theorem-5" class="headerlink" title="theorem 5"></a>theorem 5</h3><p>格的最短非零向量长度必不小于GSO之后的最短向量。<br>$$<br>|\langle Bx,\tilde{b}<em>j\rangle|&#x3D;|\langle\sum</em>{i&#x3D;1}^jx_ib_i,\tilde{b}_j\rangle|&#x3D;|x_j|\langle\tilde{b}_j,\tilde{b}_j\rangle&#x3D;|x_j||\tilde{b}_j|^2<br>$$<br>其中$\text{for all }i&lt;j,\langle b_i,\tilde{b}_j\rangle&#x3D;0$且$\langle b_j,\tilde{b}_j\rangle&#x3D;\langle\tilde{b}_j,\tilde{b}_j\rangle $</p><p>而且由绝对值不等式可知：$|\langle Bx,\tilde{b}_j\rangle|\leq||Bx||\cdot||\tilde{b}_j||$</p><p>这样就导出了结论<br>$$<br>|Bx|\geq|x_j||\tilde{b}_j|\geq|\tilde{b}_j|\geq\min|\tilde{b}_i|<br>$$</p><h3 id="corollary-6"><a href="#corollary-6" class="headerlink" title="corollary 6"></a>corollary 6</h3><p>对于任一格，存在$\epsilon &gt; 0$使得任意两个格点距离大于它$||x-y||&gt;\epsilon$</p><p>证明：取theorem 5中提到的GSO后最短向量。</p><h3 id="claim-7"><a href="#claim-7" class="headerlink" title="claim 7"></a>claim 7</h3><p>格的逐次最小长度必定能被取得。</p><h3 id="Upper-bounds-on-the-successive-minima"><a href="#Upper-bounds-on-the-successive-minima" class="headerlink" title="Upper bounds on the successive minima"></a>Upper bounds on the successive minima</h3><p>Minkowski 逐次最小长度的上界 (Minkowski’s Upper bounds on the successive minima)。</p><p>只考虑满格。</p><h3 id="Theorem-8-Blichfeld"><a href="#Theorem-8-Blichfeld" class="headerlink" title="Theorem 8 Blichfeld"></a>Theorem 8 Blichfeld</h3><p>对于任意实数系上的满秩格$\Lambda$和可测度的实数上集合S（$vol(S)&gt;det(\Lambda)$），S上存在两个不相等的点，向量差属于格$\Lambda$</p><p><img src="D:\vblog\source_posts\三论格LATTICE_3.assets\image-20240125165009129.png" alt="image-20240125165009129"></p><blockquote><p>看不懂思密达</p></blockquote><h3 id="Theorem-9-Minkowski’s-convex-body-theorem"><a href="#Theorem-9-Minkowski’s-convex-body-theorem" class="headerlink" title="Theorem 9  Minkowski’s convex body theorem"></a>Theorem 9  Minkowski’s convex body theorem</h3><p>满秩格$\Lambda$的秩为n，对于任何中心对称凸集S，如果$vol(S)&gt;2^ndet(\Lambda)$则S包含一个非零格点。</p><h3 id="Claim-10"><a href="#Claim-10" class="headerlink" title="Claim 10"></a>Claim 10</h3><p>$$<br>vol(B(0,r))\geq (\frac{2r}{\sqrt{n}})^n<br>$$</p><p>证明：这个n维球里面包含了长度为$\frac{2r}{\sqrt{n}}$的超立方体</p><h3 id="Corollary-11-Minkowski’s-First-Theorem"><a href="#Corollary-11-Minkowski’s-First-Theorem" class="headerlink" title="Corollary 11 Minkowski’s First Theorem"></a>Corollary 11 Minkowski’s First Theorem</h3><p>$$<br>\lambda_1(\Lambda)\leq\sqrt{n}(det\Lambda)^{\frac{1}{n}}<br>$$</p><h3 id="Claim-12"><a href="#Claim-12" class="headerlink" title="Claim 12"></a>Claim 12</h3><p>$$<br>\left(\frac{2\lambda_1(\Lambda)}{\sqrt{n}}\right)^n\leq\mathrm{vol}(\mathrm{B}(0,\lambda_1(\Lambda)))\leq2^n\det\Lambda<br>$$</p><h2 id="4-Computational-Problems"><a href="#4-Computational-Problems" class="headerlink" title="4. Computational Problems"></a>4. Computational Problems</h2><p>闵可夫斯基第一定理说明了秩n的格$\Lambda $至少包含一个非零向量，其长度小于等于右式。但是这不具有建设性，因为没有一个找到这个向量的算法。事实上，没有已知的有效算法可以保证找到这样的短向量。</p><p>这就是格的计算难题SVP：最短向量问题。准确来说是给出一个格，需要找到最短的非零格点。</p><p>更准确的说，SVP有三个变体，决定了我们是否需要找到这个向量，或者只需要长度，或者确定它小于某个数字。</p><ul><li>Search SVP：给定格基$B \in Z^{m\times n}$，求$v\in L(B),st.||v||&#x3D;\lambda_1(L(b))$</li><li>Optimization SVP：给定格基$B \in Z^{m\times n}$，找到$\lambda_1(L(b))$</li><li>Decisional SVP：给定格基$B \in Z^{m\times n}$和有理数r，判断$\lambda_1(L(b))\leq r$是否成立</li></ul><p>在这里我们限制格基由整数向量组成，目的是使输入是有限多位的。事实上，我们还可以允许格基是有理向量，这和整数向量是等价的，因为可以通过缩放使所有有理数坐标都是整数。</p><p>三个问题变体的难度是等价的。</p><p>另一个基本格难题是最近向量问题CVP，目标是找到最接近给定空间点的格点。对于任意的近似因子$\gamma \geq 1$，定义有三个等价的变体：</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/09/hello-world/"/>
      <url>/2024/03/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>再论格密码</title>
      <link href="/2023/08/27/zai-lun-ge-mi-ma/"/>
      <url>/2023/08/27/zai-lun-ge-mi-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="再论格密码"><a href="#再论格密码" class="headerlink" title="再论格密码"></a>再论格密码</h1><blockquote><p>过了一年，在学完了高等代数的情况下再回来看曾经学的知识，已经轻松了不少。</p><p>这是在山石夏令营里面听Tover讲的格密码入门学习笔记。</p></blockquote><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>起因是一道题目</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">bits <span class="token operator">=</span> <span class="token number">512</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>q <span class="token operator">=</span> random_prime<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span>bits<span class="token punctuation">,</span> lbound <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">^</span><span class="token punctuation">(</span>bits<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>R <span class="token operator">=</span> Gf<span class="token punctuation">(</span>q<span class="token punctuation">)</span>f <span class="token operator">=</span> R<span class="token punctuation">(</span>random_prime<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span><span class="token punctuation">(</span>bits<span class="token operator">//</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>g <span class="token operator">=</span> R<span class="token punctuation">(</span>random_prime<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span><span class="token punctuation">(</span>bits<span class="token operator">//</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lbound <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">^</span><span class="token punctuation">(</span>bits<span class="token operator">//</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> gcd<span class="token punctuation">(</span>f<span class="token punctuation">,</span> q<span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>h <span class="token operator">=</span> f<span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>g<span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'q = %d'</span> <span class="token operator">%</span>q<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'h = %d'</span> <span class="token operator">%</span>h<span class="token punctuation">)</span><span class="token comment">#Aim: find f and g</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面包含的题目条件比较特别：</p><ol><li><p>随机选择大的模数q</p></li><li><p>选择保密的整数f和g。它们满足范围要求和数值要求<br>$$<br>f&lt;\sqrt{q&#x2F;2}\\sqrt{q&#x2F;4}&lt;g&lt;\sqrt{q&#x2F;2}\gcd(f,q\times g)&#x3D;1<br>$$</p></li><li><p>计算$h\equiv f^{-1}\times g(mod\quad q)$</p></li></ol><p>那么，我们就得到了一条有三个未知数的方程：<br>$$<br>fh-kq&#x3D;g<br>$$<br>显然这是一个有无数个整数解的不定方程，我们稍微改变一下这个方程的写法，把方程的左边变成两个向量相乘的形式。<br>$$<br>(h, -k)* (f, q)&#x3D;g<br>$$<br>我们再补上一个事实f&#x3D;f，使得已知的向量变成一个2×2的矩阵<br>$$<br>(f,-k)*<br>\left[<br>\begin{matrix}<br>1 &amp; h\<br>0 &amp; q<br>\end{matrix}<br>\right]<br>&#x3D;(f,g)<br>$$<br>事实上，大多数NTRU的题目中，寻找这个矩阵就是我们要完成是事情，它应当具有以下的性质。</p><blockquote><p>等式右边的向量的长度，应当小于矩阵的行列式开方。</p></blockquote><h2 id="格"><a href="#格" class="headerlink" title="格"></a>格</h2><p>我们知道，两个线性无关的向量的线性组合可以表示一个平面。或者说，一个平面可以被该平面上的两个不平行的向量的线性组合表示，这个时候，我们称这两个向量为这个平面的一组基。</p><p>但是，我们想要表示这个平面上的任意一点的前提是，线性组合里面的两个系数都可以是任意实数。但是当我们要求向量和系数都是在某个整数域内的时候，两个向量的线性组合就不会覆盖一整个平面，而是会成为一个个格点的形式，如果是三个线性无关的向量，那么它们的线性组合就会是空间上类似晶格的东西。当向量的个数不断增加的时候，就会越来越抽象。但是不管是几维问题，向量都只有一个长度。</p><p>我们称这种基底为格基。显然一个格可以由里面各种非线性组合的向量组成格基，那么这组格基一定有一个长度的最小值。或者说，这些格基的线性组合中一定有长度最短的向量。</p><p>有一条式子叫做高斯启发式The Gaussian Heuristic<br>$$<br>\sigma (L)&#x3D;\sqrt{\frac{n}{2\pi e}}\times(det\quad L)^{1&#x2F;n}<br>$$<br>它的意义是在一个任意选择的格中，最短的非零向量满足<br>$$<br>||v_{shortest}||\approx \sigma(L)<br>$$<br>我们对于这条式子的理解就是，长度小于等于$\sigma(L)$的向量很少或者只有一个，那么如果我们能求出最短的向量，而且题目里面的那个所求的向量确实大小相符，那么我们求出来的很可能是正确的结果。</p><p>众所周知在位数面前系数的大小显得很苍白，所以我们一般只比较二进制位数的大小，也就是<br>$$<br>||v_{shortest}||\approx det(L)<br>$$<br>在这条式子的前后还有非常多的相关描述，但是目前来说我们需要暂时把这条结论记住。</p><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><p>关于开头的构造一个矩阵，其本质就是构造出这样的一个格。请注意这里面已知数的位数和未知数应当具有的位数是经过设计的。</p><p>我们所求的f和g的长度应当都不到q的一半，它们组成的向量应当也是差不多的长度，而且矩阵<br>$$<br>\left[<br>\begin{matrix}<br>1 &amp; f\<br>0 &amp; q<br>\end{matrix}<br>\right]<br>$$<br>的行列式就是q，它是2阶的，开平方根得到的结果长度也应当在q长度的一半左右。那么我们只需要求这组格基的最短向量，就很可能可以求出$(f,g)$。</p><h2 id="基本题解"><a href="#基本题解" class="headerlink" title="基本题解"></a>基本题解</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">q <span class="token operator">=</span> h <span class="token operator">=</span> <span class="token comment">#hack</span>M <span class="token operator">=</span> matrix<span class="token punctuation">(</span>ZZ<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> q<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>L <span class="token operator">=</span> M<span class="token punctuation">.</span>LLL<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">,</span> g <span class="token operator">=</span> L<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>f <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>g <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token comment">#check</span>R <span class="token operator">=</span> GF<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token keyword">assert</span> R<span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">==</span> R<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>R<span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f = %d'</span> <span class="token operator">%</span>f<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'g = %d'</span> <span class="token operator">%</span>g<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配平"><a href="#配平" class="headerlink" title="配平"></a>配平</h2><p>如果数字大小不对，那么这也可能是设计。我们还有一点机会可以依葫芦画瓢。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="高斯启发式的由来"><a href="#高斯启发式的由来" class="headerlink" title="高斯启发式的由来"></a>高斯启发式的由来</h3><h3 id="高斯启发式的局限"><a href="#高斯启发式的局限" class="headerlink" title="高斯启发式的局限"></a>高斯启发式的局限</h3><ol><li>维度不能太高，否则LLL算法可能不能帮你找到最短向量</li><li>需要格比较随机，否则可能找错。</li><li>启发式只是估计，并没有什么证明或者保证只有1个。</li></ol><h3 id="一些其他背景知识"><a href="#一些其他背景知识" class="headerlink" title="一些其他背景知识"></a>一些其他背景知识</h3><h4 id="最短向量问题SVP"><a href="#最短向量问题SVP" class="headerlink" title="最短向量问题SVP"></a>最短向量问题SVP</h4><h4 id="LLL算法"><a href="#LLL算法" class="headerlink" title="LLL算法"></a>LLL算法</h4>]]></content>
      
      
      <categories>
          
          <category> crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GDOUCTF_wp</title>
      <link href="/2023/04/16/gdouctf-wp/"/>
      <url>/2023/04/16/gdouctf-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="GDOUCTF2023"><a href="#GDOUCTF2023" class="headerlink" title="GDOUCTF2023"></a>GDOUCTF2023</h1><h2 id="Absolute-Baby-Encrytpion"><a href="#Absolute-Baby-Encrytpion" class="headerlink" title="Absolute_Baby_Encrytpion"></a>Absolute_Baby_Encrytpion</h2><p>古典密码，简单替换，只不过js我不会，自己手动做了密码表……</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">l1<span class="token operator">=</span><span class="token string">'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()_+-=`~&#123;&#125;[]|:;\"\'&lt;>,.?/'</span>l2<span class="token operator">=</span><span class="token string">'!1)vm+q0c](&#125;[85$*i>#&lt;?o^-_hwe9gzd~=xj:4b`13t6sn;\'rkp\"&amp;/\\2.%|,@&#123;u7ya'</span>n<span class="token operator">=</span><span class="token number">0</span>c<span class="token operator">=</span><span class="token string">'+&#125;!q")hiim)#&#125;-nvm)i-$#mvn#0mnbm)im#n+&#125;!qnm8)i-$#mvnoc#0nz&lt;$9inm!>-n1:1-nm8)i-$~c58n!&#125;qhij#0[noic##m8nc8n?!8c&#125;w!n]>&amp;'</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    m<span class="token operator">=</span><span class="token string">''</span>    n <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> c<span class="token punctuation">:</span>        tmp <span class="token operator">=</span> l1<span class="token punctuation">[</span>l2<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span>        m <span class="token operator">+=</span> tmp    <span class="token keyword">if</span> m<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'nssctf&#123;'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>        quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    c<span class="token operator">=</span>m    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="babylua"><a href="#babylua" class="headerlink" title="babylua"></a>babylua</h2><p>lua还是不会，让bing给我逐行解释一下。</p><p><del>什么密码比赛啊做两题学两门语言</del></p><blockquote><p>好的，我会尽力解释这段代码的每一行。请看以下的注释：</p><p>local flag &#x3D; ‘’ –这里是你要逆推出的flag – 这一行定义了一个局部变量 flag，用来存储你要加密的字符串，目前为空</p><p>local md5 &#x3D; require(“md5”) – 这一行导入了一个名为 md5 的模块，用来计算字符串的 MD5 哈希值</p><p>math.randomseed(os.time()) – 这一行设置了随机数种子，用当前的系统时间作为参数</p><p>local function randomStr(len) local rankStr &#x3D; “” local randNum &#x3D; 0 for i &#x3D; 1, len do randNum &#x3D; math.random(1, 2) if randNum &#x3D;&#x3D; 1 then rankStr &#x3D; rankStr … string.char(math.random(65, 90)) elseif randNum &#x3D;&#x3D; 2 then rankStr &#x3D; rankStr … string.char(math.random(97, 122)) end end return rankStr end – 这一段定义了一个局部函数 randomStr，用来生成一个指定长度的随机字符串 – 函数内部定义了两个局部变量 rankStr 和 randNum，分别用来存储生成的字符串和随机数 – 函数使用了一个 for 循环，从 1 到 len 遍历 – 每次循环中，先生成一个 1 到 2 的随机数，赋值给 randNum – 如果 randNum 等于 1，就在 rankStr 后面拼接一个 65 到 90 的随机 ASCII 码对应的大写字母 – 如果 randNum 等于 2，就在 rankStr 后面拼接一个 97 到 122 的随机 ASCII 码对应的小写字母 – 最后返回 rankStr</p><p>local seed &#x3D; randomStr(4) local key &#x3D; md5.sumhexa(md5.sumhexa(seed)) print(key:sub(1,10)) – 这三行调用了 randomStr 函数和 md5 模块的方法，生成了一个十位的十六进制字符串 key，并打印出来 – 首先调用 randomStr(4) 生成一个四位的随机字符串，赋值给局部变量 seed – 然后调用 md5.sumhexa(md5.sumhexa(seed)) 对 seed 进行两次 MD5 哈希运算，并转换为十六进制字符串，赋值给局部变量 key – 最后调用 key:sub(1,10) 截取 key 的前十位，并打印出来</p><p>secret &#x3D; {} – 这一行定义了一个全局变量 secret，用来存储加密后的结果，初始化为空表</p><p>for i &#x3D; 1, #flag do secret[i] &#x3D; string.byte(flag:sub(i,i)) + string.byte(key:sub(i,i)) end – 这一段使用了一个 for 循环，对 flag 和 key 进行逐位加密，并将结果存入 secret 表中 – 循环从 1 到 #flag 遍历，#flag 表示 flag 的长度 – 每次循环中，先调用 flag:sub(i,i) 截取 flag 的第 i 位字符，然后调用 string.byte() 将其转换为 ASCII 码数值 – 然后调用 key:sub(i,i) 截取 key 的第 i 位字符，然后调用 string.byte() 将其转换为 ASCII 码数值 – 最后将两个数值相加，并赋值给 secret[i]</p><p>for i, v in ipairs(secret) do io.write(v, ’ ‘) end – 这一段使用了一个 for 循环，遍历 secret 表中的每个元素，并打印出来 – 循环使用 ipairs 函数按照索引顺序遍历 secret 表，每次循环中得到索</p></blockquote><p>后面因为太长被枪毙了我也看不到，但是已经可以知道加密原理了。</p><p>先是随机4个字母，以此用md5生成32位的key，但是只给前十位。</p><p>接下来把flag的ASCII值加上md5相应字母的值，得到输出。</p><p>md5可以直接爆破出来。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token triple-quoted-string string">'''import itertoolsfrom hashlib import md5from tqdm import *import stringst='b5e62abe84'table = string.ascii_lowercase + string.ascii_uppercasestrlist = itertools.product(table, repeat=4)print(table)for i in tqdm(strlist):tmp = i[0] + i[1] + i[2] + i[3]bru = md5(md5(tmp.encode('utf-8')).hexdigest().encode()).hexdigest()if bru.startswith(st):print(bru)'''</span><span class="token comment">#data_sha=hashlib.md5((data).encode('utf-8')).hexdigest()</span>key <span class="token operator">=</span> <span class="token string">'b5e62abe84bc8afbfd97c91a15aa0867'</span>c <span class="token operator">=</span> <span class="token string">'200 161 198 157 173 169 199 150 105 163 193 175 173 194 135 131 135 225'</span>c <span class="token operator">=</span> c<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> c<span class="token punctuation">]</span>d<span class="token operator">=</span><span class="token string">b''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> bytes_to_long<span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>d <span class="token operator">+=</span> long_to_bytes<span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>有限域开根</title>
      <link href="/2023/04/14/you-xian-yu-kai-gen/"/>
      <url>/2023/04/14/you-xian-yu-kai-gen/</url>
      
        <content type="html"><![CDATA[<h1 id="有限域开根学习（未完成）"><a href="#有限域开根学习（未完成）" class="headerlink" title="有限域开根学习（未完成）"></a>有限域开根学习（未完成）</h1><p><a href="https://www.anquanke.com/post/id/194232">reference</a></p><p>目标：$x^r \equiv s (modq)$求解x。(或者引用中出现δ&#x3D;s)</p><p>主流方法：the Adleman-Manders-Miller algorithm 和 the Cipolla-Lehmer algorithms</p><p>下面是amm，思想是找到一个原根并化成离散对数的问题。</p><blockquote><ol><li>将q-1分解为r×t×s的形式，其中(r,s)&#x3D;1。</li><li>找到一个r次非剩余ρ，即满足ρ^(q-1)&#x2F;r ≠ 1 (mod q)的数。（n次剩余系下的勒让德符号）</li><li>找到一个最小的非负整数α，使得s|(r^α-1)。</li><li>计算(δ(rα-1))^(t-1) (mod q)，得到一个r次单位根K_r-j，即满足(K_r-j)^r ≡ 1 (mod q)的数。</li><li>通过求解离散对数问题，找到j∈{0,1,…,r-1}，使得K_r-j ≡ ρ^(j×s×t-1) (mod q)。</li><li>重复第4和第5步，直到找到所有的j_1,j_2,…,j_t-1∈{0,1,…,r-1}，使得(δ(rα-1))^(t-i) ≡ ρ^(j_i×s×t-i) (mod q)，对于i&#x3D;2,3,…,t-1。</li><li>计算x &#x3D; δ^α × ρ(j_1+j_2×r+…+j_t-1×r(t-2)) (mod q)，则x是方程的一个根。<br> 如果要求解所有的根，可以利用一个循环群的生成元来找到其他的根。具体来说，如果g是F_q*的一个生成元，则x,gx,g2x,…,g(r-1)x就是方程的所有根。</li></ol><p>如果要求解更一般的情况，即r|q-1的情况，则需要使用另一种方法。该方法使用一个二次非剩余和一系列平方根提取来找到一个根，然后使用循环群的生成元来找到其他的根。具体步骤如下：</p><ol><li>将q-1分解为r×t×s的形式，其中s是奇数。</li><li>找到一个二次非剩余ρ，即满足ρ^(q-1)&#x2F;2 ≠ 1 (mod q)的数。</li><li>计算(δs)((q-1)&#x2F;2) (mod q)，如果结果不等于1，则δ不是一个r次剩余，无解；否则继续下一步。</li><li>计算(δs)((q-1)&#x2F;4) (mod q)，得到一个平方根K_0或-K_0，即满足(K_0)^2 ≡ δ^s (mod q)的数。</li><li>重复第4步，直到找到所有的K_0,K_1,…,K_t-2，使得(K_i)^2 ≡ δ^s × ρ^(i×s) (mod q)，对于i&#x3D;0,1,…,t-2。</li><li>计算x &#x3D; K_0 × K_1 × … × K_t-2 × δ × ρ^(t&#x2F;2) (mod q)，则x是方程的一个根。</li></ol></blockquote><p>这种方法的其中一个应用场景是做rsa题目的时候e与fn不互质。（知道pqec，e为fn的一个因子）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:utf8 -*-</span><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> libnum <span class="token keyword">import</span>  <span class="token operator">*</span><span class="token keyword">import</span> random<span class="token keyword">import</span> math<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>special <span class="token keyword">import</span> cbrt<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">onemod</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token operator">=</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span>e<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#(r,s)=1</span>         p<span class="token operator">=</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span>    <span class="token keyword">return</span> p<span class="token keyword">def</span> <span class="token function">AMM_rth</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>r<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># r|(q-1)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start to calculate primitive root...'</span><span class="token punctuation">)</span>    start<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>r<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    p<span class="token operator">=</span>onemod<span class="token punctuation">(</span>r<span class="token punctuation">,</span>q<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'p:%d'</span><span class="token operator">%</span>p<span class="token punctuation">)</span>    t<span class="token operator">=</span><span class="token number">0</span>    s<span class="token operator">=</span>q<span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token operator">%</span>r<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s<span class="token operator">=</span>s<span class="token operator">//</span>r        t<span class="token operator">+=</span><span class="token number">1</span>    k<span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">*</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>r<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        k<span class="token operator">+=</span><span class="token number">1</span>    alp<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token operator">*</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span>r        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'s:%d,t:%d r:%d alp:%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">,</span>r<span class="token punctuation">,</span>alp<span class="token punctuation">)</span><span class="token punctuation">)</span>    a<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>r<span class="token operator">**</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>s<span class="token punctuation">,</span>q<span class="token punctuation">)</span>    b<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>r<span class="token operator">*</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span>    c<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>s<span class="token punctuation">,</span>q<span class="token punctuation">)</span>    h<span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        d<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">**</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'d:%d'</span><span class="token operator">%</span>d<span class="token punctuation">)</span>        <span class="token keyword">if</span> d<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            j<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            j<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span>math<span class="token punctuation">.</span>log<span class="token punctuation">(</span>d<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>r        b<span class="token operator">=</span><span class="token punctuation">(</span>b<span class="token operator">*</span><span class="token punctuation">(</span>c<span class="token operator">**</span><span class="token punctuation">(</span>r<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>q        h<span class="token operator">=</span><span class="token punctuation">(</span>h<span class="token operator">*</span>c<span class="token operator">**</span>j<span class="token punctuation">)</span><span class="token operator">%</span>q        c<span class="token operator">=</span><span class="token punctuation">(</span>c<span class="token operator">*</span>r<span class="token punctuation">)</span><span class="token operator">%</span>q    result<span class="token operator">=</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>alp<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token operator">*</span>h<span class="token punctuation">)</span>    end<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'result:%d'</span><span class="token operator">%</span>result<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Finish in &#123;&#125; seconds'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token comment">#2020.4.3 finish</span>        <span class="token keyword">def</span> <span class="token function">ALL_Solution</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>q<span class="token punctuation">,</span>rt<span class="token punctuation">,</span>cq<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start to calculate all root...'</span><span class="token punctuation">)</span>    start<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    mp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> pr <span class="token keyword">in</span> rt<span class="token punctuation">:</span>        r<span class="token operator">=</span><span class="token punctuation">(</span>pr<span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token operator">%</span>q        <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>e<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token operator">==</span>cq<span class="token punctuation">)</span>        mp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    end<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Finish in &#123;&#125; seconds'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> mp       <span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span>mp<span class="token punctuation">,</span>mq<span class="token punctuation">,</span>e<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'satrting crt... '</span><span class="token punctuation">)</span>    i<span class="token operator">=</span><span class="token number">1</span>    j<span class="token operator">=</span><span class="token number">1</span>    start<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    t1<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>q<span class="token punctuation">,</span>p<span class="token punctuation">)</span>    t2<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span>    <span class="token keyword">for</span> mp1 <span class="token keyword">in</span> mp<span class="token punctuation">:</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">%</span><span class="token number">1000</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>        j<span class="token operator">+=</span><span class="token number">1</span>                   <span class="token keyword">for</span> mq1 <span class="token keyword">in</span> mq<span class="token punctuation">:</span>            ans<span class="token operator">=</span><span class="token punctuation">(</span>mp1<span class="token operator">*</span>t1<span class="token operator">*</span>q<span class="token operator">+</span>mq1<span class="token operator">*</span>t2<span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>p<span class="token operator">*</span>q<span class="token punctuation">)</span>            <span class="token keyword">if</span> check<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Finish in &#123;&#125; seconds'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>                           <span class="token keyword">return</span>     <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> sta    <span class="token keyword">try</span><span class="token punctuation">:</span>        a<span class="token operator">=</span>n2s<span class="token punctuation">(</span>m<span class="token punctuation">)</span>        <span class="token comment">#print(a)</span>        <span class="token keyword">if</span> a<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>sta<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">ALL_ROOT2</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#use function set() and .add() ensure that the generated elements are not repeated</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start to find all primitive root...'</span><span class="token punctuation">)</span>    start<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    li<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>        p<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span>r<span class="token punctuation">,</span>q<span class="token punctuation">)</span>        li<span class="token punctuation">.</span>add<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    end<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Finish in &#123;&#125; seconds'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> li            <span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    c <span class="token operator">=</span>     p <span class="token operator">=</span>     q <span class="token operator">=</span>     e <span class="token operator">=</span>     sta <span class="token operator">=</span> <span class="token string">''</span>    cp<span class="token operator">=</span>c<span class="token operator">%</span>p    cq<span class="token operator">=</span>c<span class="token operator">%</span>q        mp<span class="token operator">=</span>AMM_rth<span class="token punctuation">(</span>cp<span class="token punctuation">,</span>e<span class="token punctuation">,</span>p<span class="token punctuation">)</span>    mq<span class="token operator">=</span>AMM_rth<span class="token punctuation">(</span>cq<span class="token punctuation">,</span>e<span class="token punctuation">,</span>q<span class="token punctuation">)</span>            rt1<span class="token operator">=</span>ALL_ROOT2<span class="token punctuation">(</span>e<span class="token punctuation">,</span>p<span class="token punctuation">)</span>    rt2<span class="token operator">=</span>ALL_ROOT2<span class="token punctuation">(</span>e<span class="token punctuation">,</span>q<span class="token punctuation">)</span>             amp<span class="token operator">=</span>ALL_Solution<span class="token punctuation">(</span>mp<span class="token punctuation">,</span>p<span class="token punctuation">,</span>rt1<span class="token punctuation">,</span>cp<span class="token punctuation">,</span>e<span class="token punctuation">)</span>    amq<span class="token operator">=</span>ALL_Solution<span class="token punctuation">(</span>mq<span class="token punctuation">,</span>q<span class="token punctuation">,</span>rt2<span class="token punctuation">,</span>cq<span class="token punctuation">,</span>e<span class="token punctuation">)</span>           calc<span class="token punctuation">(</span>amp<span class="token punctuation">,</span> amq<span class="token punctuation">,</span>e<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意以上脚本理论上能跑但是可能有瑕疵。</p><p>同时如果指数有特殊的性质的话我们或许可以不经过爆破就解出其中以一个根。</p><ol><li><p>$q\equiv 3(mod4)$则有其中一个根$x\equiv c^\frac{q+1}{4}(modq)$</p><p>证明：费马小定理加勒让德符号。</p></li><li><p>$q\equiv 5(mod8)$在对于二次剩余的根下有：</p></li></ol><p>$$<br>1:b\equiv(2a)^\frac{q-5}{8}\<br>2:i&#x3D;2ab^2\<br>3:x&#x3D;ab(i-1)<br>$$</p><ol start="3"><li>$q\equiv 9(mod16)$在同样是二次剩余的根下：</li></ol><p>$$<br>1:b\equiv(2a)^\frac{q-5}{8}\<br>2：random .d. st. -b \equiv(\frac{a}{p}) \equiv a^{\frac{p-1}{2}}\<br>3:u\equiv (2ad^2)^\frac{q-9}{16}\<br>4:i\equiv 2u^2d^2a\<br>5:x\equiv uda(i-1)<br>$$</p><ol start="4"><li><p>在有限域中 Fq 开 r^s 根 [ q ≡ lr^s + 1 (mod r^(s+1)) ]</p><p>下面还没看。</p><p>首先我们需要一个质数q，并且有一个r，满足 r | (q-1)，（如果r与q-1互质，那问题就很简单了，r的逆用欧拓很快就能找到）然后会存在一个s，s是满足<img src="D:/vblog/source/_posts/%E6%9C%89%E9%99%90%E5%9F%9F%E5%BC%80%E6%A0%B9.assets/t011ec4ae30a0a69848.png" alt="img">的最大的正整数</p><p>即会满足<img src="D:/vblog/source/_posts/%E6%9C%89%E9%99%90%E5%9F%9F%E5%BC%80%E6%A0%B9.assets/t0117ac1d4612a11106.png" alt="img"></p><h4 id="定理1：在域Fq中，给定一个r次幂c，存在一个b，使得c-r-1-·b-r-具有r-t阶，（t-lt-s）"><a href="#定理1：在域Fq中，给定一个r次幂c，存在一个b，使得c-r-1-·b-r-具有r-t阶，（t-lt-s）" class="headerlink" title="定理1：在域Fq中，给定一个r次幂c，存在一个b，使得c^(r-1)·b^r 具有r^t阶，（t&lt;s）"></a>定理1：在域Fq中，给定一个r次幂c，存在一个b，使得c^(r-1)·b^r 具有r^t阶，（t&lt;s）</h4><h5 id="证明："><a href="#证明：" class="headerlink" title="证明："></a>证明：</h5><p>我们设一个l，满足gcd(l,r)&#x3D;1,那么存在β (0≤β&lt;l)，满足 rβ+r−1 ≡ 0 (mod l) 即存在α，满足 rβ + r−1 &#x3D; lα.</p><p>然后，我们设一个 ζ 为，<img src="D:/vblog/source/_posts/%E6%9C%89%E9%99%90%E5%9F%9F%E5%BC%80%E6%A0%B9.assets/t0174dfb665065d5a9c.png" alt="img"></p><p>则有<img src="D:/vblog/source/_posts/%E6%9C%89%E9%99%90%E5%9F%9F%E5%BC%80%E6%A0%B9.assets/t01323fd852fd2da8cc-1681493115316-56.png" alt="img"></p><p>其中，<img src="D:/vblog/source/_posts/%E6%9C%89%E9%99%90%E5%9F%9F%E5%BC%80%E6%A0%B9.assets/t0174a4a9dce462202e.png" alt="img"></p><p>因为c是域Fq中的r次幂，故ζ拥有r^t阶，(0≤t&lt;s) （为啥这里t就小于s了，求指点~）</p><h5 id="利用："><a href="#利用：" class="headerlink" title="利用："></a>利用：</h5><p>在域Fq中，我们令 ξ 为 一个r^2阶本原单位根，ξ可以通过公式<img src="D:/vblog/source/_posts/%E6%9C%89%E9%99%90%E5%9F%9F%E5%BC%80%E6%A0%B9.assets/t014fda793616d46a6c.png" alt="img">计算得到，其中d为域Fq中的非r次幂，这样的d可以随机选取，在域Fq中找到它的概率为(r-1)&#x2F;r</p><p>由此，我们设<img src="D:/vblog/source/_posts/%E6%9C%89%E9%99%90%E5%9F%9F%E5%BC%80%E6%A0%B9.assets/t01e51b582a465b8d48-1681493115316-60.png" alt="img">是一个r^t阶的本原单位根，则存在一对唯一确定的i，j满足<img src="D:/vblog/source/_posts/%E6%9C%89%E9%99%90%E5%9F%9F%E5%BC%80%E6%A0%B9.assets/t0134eabfc1d19347fb-1681493115316-62.png" alt="img"></p><p>因为<img src="D:/vblog/source/_posts/%E6%9C%89%E9%99%90%E5%9F%9F%E5%BC%80%E6%A0%B9.assets/t014b728e9ee5bfe928.png" alt="img"></p><p>所以我们有<img src="D:/vblog/source/_posts/%E6%9C%89%E9%99%90%E5%9F%9F%E5%BC%80%E6%A0%B9.assets/t0190b864f87de0026c-1681493115316-65.png" alt="img"></p><p>由此我们将展现一个新的定理，在合适的情况下，我们用一次指数运算可以找到r次剩余的一个r次根，</p><h4 id="定理2：定义u-≡-j·-r-t-−1-·r-s−t−1-≡−jr-s−t−1-mod-r-s−1-那么在域Fq中c的一个r次根为-cbξ-u-，其中b在定理1中给出。"><a href="#定理2：定义u-≡-j·-r-t-−1-·r-s−t−1-≡−jr-s−t−1-mod-r-s−1-那么在域Fq中c的一个r次根为-cbξ-u-，其中b在定理1中给出。" class="headerlink" title="定理2：定义u ≡ j·(r^t −1)·r^(s−t−1 ) ≡−jr^(s−t−1) (mod r^(s−1)). 那么在域Fq中c的一个r次根为 cbξ^u ，其中b在定理1中给出。"></a>定理2：定义u ≡ j·(r^t −1)·r^(s−t−1 ) ≡−jr^(s−t−1) (mod r^(s−1)). 那么在域Fq中c的一个r次根为 cbξ^u ，其中b在定理1中给出。</h4><h5 id="证明：-1"><a href="#证明：-1" class="headerlink" title="证明："></a>证明：</h5><p><img src="D:/vblog/source/_posts/%E6%9C%89%E9%99%90%E5%9F%9F%E5%BC%80%E6%A0%B9.assets/t01a689b7c865d0186e.png" alt="img"></p><p>（由于<img src="D:/vblog/source/_posts/%E6%9C%89%E9%99%90%E5%9F%9F%E5%BC%80%E6%A0%B9.assets/t01f7b3a38896da2c7f.png" alt="img">，由费马小定理，故在域Fq中<img src="D:/vblog/source/_posts/%E6%9C%89%E9%99%90%E5%9F%9F%E5%BC%80%E6%A0%B9.assets/t0169855b250cf60e5f.png" alt="img"> 易证，)</p><p>证毕。</p><p>注1： rβ + r −1 &#x3D; lα 即 r(β + l) + r −1 &#x3D; l(α + r)。这说明，α （mod r ）是确定的，β（mod l）是确定的，所以对于任意的α 满足<img src="D:/vblog/source/_posts/%E6%9C%89%E9%99%90%E5%9F%9F%E5%BC%80%E6%A0%B9.assets/t0147af86893696e692.png" alt="img"> ,都有唯一确定的β满足<img src="D:/vblog/source/_posts/%E6%9C%89%E9%99%90%E5%9F%9F%E5%BC%80%E6%A0%B9.assets/t015c05424ac7993951.png" alt="img"> 。作者在这里还加了一句，事实上，条件rβ + r−1−lα &#x3D; 0 可以转化为 rβ + r−1−lα ≡ 0 (mod (q-1)&#x2F;r） 因为 <img src="D:/vblog/source/_posts/%E6%9C%89%E9%99%90%E5%9F%9F%E5%BC%80%E6%A0%B9.assets/t019a62bc7d900c3be8.png" alt="img">（难道是欧拉判别定理的推广？)</p><p>注2：cb的值可以化成</p><p><img src="D:/vblog/source/_posts/%E6%9C%89%E9%99%90%E5%9F%9F%E5%BC%80%E6%A0%B9.assets/t01f8eea6b95c9f59d5.png" alt="img"></p><p>其中α是一个整数（0&lt;α&lt;r），满足<img src="D:/vblog/source/_posts/%E6%9C%89%E9%99%90%E5%9F%9F%E5%BC%80%E6%A0%B9.assets/t010e926fe5198626d2-1681493115316-74.png" alt="img">所以b也可以表示为<img src="D:/vblog/source/_posts/%E6%9C%89%E9%99%90%E5%9F%9F%E5%BC%80%E6%A0%B9.assets/t01db721dd7cb11ff28.png" alt="img"></p><p>注3：对于 ij ≡ 1 (mod r^t) ，当r^t很大（t&gt;1  并且在r^t阶循环群中的离散对数很难处理）时，其中的i和j找起来是比较困难的，所以这个方法适合在r和t都比较小的时候，也可以被视作是另一个版本的Adleman-Manders-Miller algorithm。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
          <category> math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二次剩余Cipolla</title>
      <link href="/2023/04/05/er-ci-sheng-yu-cipolla/"/>
      <url>/2023/04/05/er-ci-sheng-yu-cipolla/</url>
      
        <content type="html"><![CDATA[<h1 id="二次剩余Cipolla"><a href="#二次剩余Cipolla" class="headerlink" title="二次剩余Cipolla"></a>二次剩余Cipolla</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先二次剩余和cipolla是不同的东西，前者是一个数学定义</p><blockquote><p>对于给定的n和p，在数域F<em>p</em>内如果存在x满足$x^2 \equiv n (mod p) $，那么n在模p意义下就是二次剩余。</p><p>简而言之就是n在模p下能否开根号。</p></blockquote><p>而后者是一个算法，用于快速解出x。</p><h2 id="勒让德符号-Legendre-symbol"><a href="#勒让德符号-Legendre-symbol" class="headerlink" title="勒让德符号(Legendre symbol)"></a>勒让德符号(Legendre symbol)</h2><p>勒让德符号（在二次剩余下）的定义：<br>$$<br>(\frac{a}{p})&#x3D;<br>\begin{cases}<br>1,a为p的二次剩余\<br>-1,a为p的非二次剩余\<br>0,a \equiv 0(modp)<br>\end{cases}<br>$$<br>欧拉判别法：$(\frac{a}{p}) \equiv a^{\frac{p-1}{2}}(mod p)$（若a是不被p整除的正整数）</p><p>我们可以根据这个判别法来判断a在F<em>p</em>下是否为二次剩余。</p><p>根据费马小定理我们可以作如下推演：（在这里假设条件都是理想条件，比如p是大质数…etc）<br>$$<br>a^{p-1} \equiv 1 (modp)<br>\<br>(a^{\frac{p-1}{2}}-1) \times (a^{\frac{p-1}{2}}+1) \equiv 0 (mod p)<br>\<br>a^{\frac{p-1}{2}} &#x3D; \pm 1 (modp)<br>$$<br>我们可以知道这个勒让德符号的值只可能等于$\pm 1,0$，之所以0会出现是因为我们不确定ap是否互质（或者说a是否是p的倍数），当然这种情况不是我们要讨论的重点。</p><p>当$(\frac{a}{p})&#x3D;1$的时候，设$x^2 \equiv a (modp)$，那么$x^{p-1} \equiv 1 (modp)$就有$a^{\frac{p-1}{2}} \equiv 1 (modp)$，证明完毕。</p><p>当$(\frac{a}{p})&#x3D;-1$的时候，方程$x^2 \equiv a (modp)$无解。因为p是素数，由数论知识可知对于每个$1 \leq i \leq p$，都有唯一的整数j使得$ij \equiv a (modp)$。，所以我们可以把1,2，…p-1分成$\frac{p-1}{2}$对，使得每对的乘积都为a。于是$(p-1)! \equiv a^{\frac{p-1}{2}} (modp)$，且由威尔逊定理可知$(p-1)! \equiv -1(modp)$，因此$a^{\frac{p-1}{2}} \equiv -1(modp)$</p><p>于是再加上快速幂的知识，我们就可以快速判定一个数在模p意义下是否是二次剩余的了。</p><h2 id="其他前置知识（引理）"><a href="#其他前置知识（引理）" class="headerlink" title="其他前置知识（引理）"></a>其他前置知识（引理）</h2><ol><li>对于方程$x^2 \equiv n(modp)$，一共有$\frac{p-1}{2}$个不同的n可以使得存在解x。</li></ol><p>现在我们来逆向思考一下，从结果出发，如果我们已经知道了u和v都满足$x^2 \equiv n(modp)$的解，那么必然有$p|(u+v)(u-v)$。由于u-v肯定是小于p的数，也就是说不能整除质数p，那么可以说明p肯定整除u+v。这个推断是充要的，也就是说在数域F<em>p</em>内方程的解是对称且唯二的。另外一共有$\frac{p-1}{2}$种不同的平方，因此存在$\frac{p-1}{2}$个不同的n。</p><ol start="2"><li>$(a+b)^p \equiv a^p+b^p (modp)$</li></ol><p>显而易见，直接拆开就能证明。</p><h2 id="Cipolla算法"><a href="#Cipolla算法" class="headerlink" title="Cipolla算法"></a>Cipolla算法</h2><p>我们现在回到主题，希望求出$x^2 \equiv n (mod p) $的一个解。</p><p>先随机出一个a使得$(a^2-n)^{\frac{p-1}{2}} \equiv -1 (modp)$。由于p的非二次剩余的数量占一半，所以随机到一个满足条件的a的期望次数是2（或者说很容易随机出来）。显然这个数$(a^2-n)$不能开根号，但是我们强行给这个数开平方根，假设得到的结果是一个复数$\omega$，并且引入类似虚数的“复数域”$F_{p^2}$.那么这个新的数域中的每一个数都可以表示成$a+ \omega b$的形式。其中$\omega$是这个域的虚数单位元。这个“复数域”依然满足封闭性、交换律、结合律以及分配律的，还存在加法零元和乘法逆元（貌似符合环的定义）。</p><p>为什么要引入这么一个设定呢？</p><h3 id="因为-x-equiv-a-omega-frac-p-1-2-modq"><a href="#因为-x-equiv-a-omega-frac-p-1-2-modq" class="headerlink" title="因为$x \equiv (a+\omega)^{\frac{p+1}{2}}(modq)$"></a>因为$x \equiv (a+\omega)^{\frac{p+1}{2}}(modq)$</h3><p>下面证明这个结论：<br>$$<br>proof:\omega ^p \equiv - \omega(modp)\<br>\omega ^p<br>\equiv \omega \times \omega^{p-1}<br>\equiv w \times (w^2)^{\frac{p-1}{2}}<br>\equiv\ w \times (a^2-n)^{\frac{p-1}{2}}<br>\equiv -\omega<br>$$<br>所以<br>$$<br>\begin{aligned}<br>(a+\omega)^{p+1}<br>&amp;\equiv (a+\omega)^{p}\times (a+\omega)\<br>&amp;\equiv (a^p+\omega^p)\times (a+\omega)\<br>&amp;\equiv (a-\omega)\times(a+\omega)\<br>&amp;\equiv (a^2-\omega^2)\<br>&amp;\equiv (a^2-(a^2-n))\<br>&amp;\equiv n(modq)<br>&amp;\end{aligned}<br>$$</p><p><a href="https://blog.csdn.net/a_crazy_czy/article/details/51959546">引用csdn的链接</a></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>后来给了hint：</p><p>当q mod 4&#x3D;3时用quadratic residues开方，当q mod 4&#x3D;1时用cipolla算法开方。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> secret <span class="token keyword">import</span> flag<span class="token punctuation">,</span> hintm <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag <span class="token operator">+</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qh <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">2022</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">2023</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token keyword">assert</span> h <span class="token operator">==</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> hint<span class="token punctuation">,</span> p<span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24_000</span>c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>n <span class="token operator">=</span> <span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>c <span class="token operator">=</span> <span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>h <span class="token operator">=</span> <span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>hint <span class="token operator">=</span> <span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment"># n = 22114546923564420607945063747927422619774890007937503484905798897563036431278699718161460968350749338680452479484253816646632515078192048118109272532310403715802657061990320170724360874028667484527150185159662403573637809180151665727445208585725264186578429094937215068881079399747998551453944363665401263</span><span class="token comment"># c = 7274219309267176700435453490636404568410293850833252412471984274955007037941820465929958008672185817002749418809077052781794306899476543760452010370102811167685901654480233874375880047900499814304539829706786470978714629827690730256369200773772396109793338097451559255985268375731804819829315168807228186</span><span class="token comment"># h = 1463929459818798711929811606552273520156490689917243949474579232718301828387871678397965433435537694532920957475947201372279363554005600100100224291888130</span><span class="token comment"># hint = 5610276127312766429915480651516095336201056367031530733662980757514427535721885723009367286870294772595629284861923351543396909892645845139050780691701736</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目前的exp就不放了毕竟是错的还特别丑。就当做学了个很神奇的算法吧。（印象中好像有暴力跑的人跑了几个小时，没意思了。</p><p><del>放一个官方的wp但是有个自己写的库的。</del></p><p>好像能跑了，所以放上自己的代码，说起来这是我第一次用GitHub上的代码，也就是这段Cipolla部分，下面的东西是抄wp的，把c关于p的解解出来。</p><p>接下来就遇到了第二个函数了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">quadratic_residues</span><span class="token punctuation">(</span>_p<span class="token punctuation">,</span> _c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>_c<span class="token punctuation">,</span> <span class="token punctuation">(</span>_p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">4</span><span class="token punctuation">,</span> _p<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个函数的逻辑是首先知道q%4&#x3D;&#x3D;3所以(_p + 1) &#x2F;&#x2F; 4的运算肯定是整除运算。然后用勒让德符号判定这个数c能否开根，如果可以的话那么$1\equiv a^{\frac{p-1}{2}}(mod p)$再用这个乘以a得到$a\equiv a^{\frac{p+1}{2}}(mod p)$而且我们还知道右边的幂是偶数，所以我们直接对幂除以二理论上可以得到$\sqrt(a)$。</p><p>当然不嫌麻烦的话理论上cipolla是通杀的，就是慢了点。</p><p>然后用中国剩余定理变成关于n的解，并且将这些解存进一个数组里面，然后循环24000次，最后从解里面筛选包含HZNU开头的东西打印出来。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> tqdm <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a <span class="token punctuation">,</span>b <span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> a        self<span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token keyword">def</span> <span class="token function">Cmul</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">,</span> p<span class="token punctuation">,</span> i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> a<span class="token operator">*</span>a <span class="token operator">-</span>n    t <span class="token operator">=</span> C <span class="token punctuation">(</span><span class="token punctuation">(</span>i1<span class="token punctuation">.</span>a <span class="token operator">*</span> i2<span class="token punctuation">.</span>a <span class="token operator">+</span> i1<span class="token punctuation">.</span>b <span class="token operator">*</span> i2<span class="token punctuation">.</span>b <span class="token operator">%</span> p <span class="token operator">*</span> c<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">,</span><span class="token punctuation">(</span>i1<span class="token punctuation">.</span>b <span class="token operator">*</span> i2<span class="token punctuation">.</span>a <span class="token operator">+</span> i1<span class="token punctuation">.</span>a <span class="token operator">*</span> i2<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">%</span> p <span class="token punctuation">)</span>    <span class="token keyword">return</span> t<span class="token keyword">def</span> <span class="token function">Cqsm</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">,</span> p<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    z <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> y <span class="token punctuation">:</span>        <span class="token keyword">if</span> y <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">:</span>            z <span class="token operator">=</span> Cmul <span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">,</span> p<span class="token punctuation">,</span> z<span class="token punctuation">,</span> x<span class="token punctuation">)</span>        x <span class="token operator">=</span> Cmul <span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">,</span> p<span class="token punctuation">,</span> x<span class="token punctuation">,</span> x<span class="token punctuation">)</span>        y <span class="token operator">>></span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> z<span class="token keyword">def</span> <span class="token function">quick_power</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token operator">=</span>a<span class="token operator">%</span>c    ans<span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">while</span> b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">:</span>            ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token operator">%</span>c        b<span class="token operator">>></span><span class="token operator">=</span><span class="token number">1</span>        a<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token operator">%</span>c    <span class="token keyword">return</span> ans<span class="token keyword">def</span> <span class="token function">mod</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span>  p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">%</span> p <span class="token operator">+</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token keyword">def</span> <span class="token function">legendre</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span>  p<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 勒让德符号</span>    <span class="token keyword">return</span> quick_power<span class="token punctuation">(</span>mod<span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Cipolla</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">%</span> p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">if</span> legendre<span class="token punctuation">(</span>n<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">while</span>  <span class="token boolean">True</span><span class="token punctuation">:</span>        a<span class="token operator">=</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>p        w<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token operator">-</span>n<span class="token operator">+</span>p<span class="token punctuation">)</span><span class="token operator">%</span>p        <span class="token keyword">if</span> legendre<span class="token punctuation">(</span>a <span class="token operator">*</span> a <span class="token operator">-</span> n<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">==</span> p <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">:</span>            <span class="token keyword">break</span>    u <span class="token operator">=</span> C<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    u <span class="token operator">=</span> Cqsm<span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">,</span> p<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> mod<span class="token punctuation">(</span>u<span class="token punctuation">.</span>a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">quadratic_residues</span><span class="token punctuation">(</span>_p<span class="token punctuation">,</span> _c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>_c<span class="token punctuation">,</span> <span class="token punctuation">(</span>_p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">4</span><span class="token punctuation">,</span> _p<span class="token punctuation">)</span>n0 <span class="token operator">=</span> <span class="token number">22114546923564420607945063747927422619774890007937503484905798897563036431278699718161460968350749338680452479484253816646632515078192048118109272532310403715802657061990320170724360874028667484527150185159662403573637809180151665727445208585725264186578429094937215068881079399747998551453944363665401263</span>c <span class="token operator">=</span> <span class="token number">7274219309267176700435453490636404568410293850833252412471984274955007037941820465929958008672185817002749418809077052781794306899476543760452010370102811167685901654480233874375880047900499814304539829706786470978714629827690730256369200773772396109793338097451559255985268375731804819829315168807228186</span>h <span class="token operator">=</span> <span class="token number">1463929459818798711929811606552273520156490689917243949474579232718301828387871678397965433435537694532920957475947201372279363554005600100100224291888130</span>hint <span class="token operator">=</span> <span class="token number">5610276127312766429915480651516095336201056367031530733662980757514427535721885723009367286870294772595629284861923351543396909892645845139050780691701736</span>p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token keyword">assert</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">2022</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2024</span> <span class="token operator">&lt;</span> p <span class="token operator">-</span> <span class="token number">1</span>q <span class="token operator">=</span> hint <span class="token operator">//</span> <span class="token number">2024</span> <span class="token operator">+</span> <span class="token number">2022</span><span class="token keyword">assert</span> n0 <span class="token operator">%</span> q <span class="token operator">==</span> <span class="token number">0</span>p <span class="token operator">=</span> n0 <span class="token operator">//</span> q<span class="token keyword">assert</span> p <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token keyword">assert</span> q <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">3</span>x <span class="token operator">=</span> <span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">24_000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp_x<span class="token punctuation">,</span> x <span class="token operator">=</span> x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> tmp_x<span class="token punctuation">:</span>        x1 <span class="token operator">=</span> Cipolla<span class="token punctuation">(</span>i<span class="token punctuation">,</span> p<span class="token punctuation">)</span>        x2 <span class="token operator">=</span> p <span class="token operator">-</span> x1        <span class="token keyword">if</span> x1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> x2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x1<span class="token punctuation">)</span>        x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x2<span class="token punctuation">)</span>    c <span class="token operator">=</span> quadratic_residues<span class="token punctuation">(</span>q<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token punctuation">[</span>c<span class="token punctuation">,</span> q <span class="token operator">-</span> c<span class="token punctuation">]</span><span class="token punctuation">:</span>        m <span class="token operator">=</span> crt<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>p<span class="token punctuation">,</span> q<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">b'HZNUCTF'</span> <span class="token keyword">in</span> long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>            exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事实上最后我也跑不出来……</p><p>![08WI(5O$R&#96;SRG)IITDQ1W%6](D:&#x2F;vblog&#x2F;source&#x2F;_posts&#x2F;%E4%BA%8C%E6%AC%A1%E5%89%A9%E4%BD%99Cipolla.assets&#x2F;08WI(5O$R%60SRG)IITDQ1W%256.png)</p><p>这是跑了两个小时的结果捏。</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
          <category> math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>p-adic learning note</title>
      <link href="/2023/03/10/p-adic-learning-note/"/>
      <url>/2023/03/10/p-adic-learning-note/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="关于p-adic的数学"><a href="#关于p-adic的数学" class="headerlink" title="关于p-adic的数学"></a>关于p-adic的数学</h1><h2 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h2><p><a href="https://www.youtube.com/watch?v=3gyHKCDq1YA">视频来源</a>，建议配合视频食用。下面是对文案的摘抄翻译和一点点自己的理解。</p><p>a with the powers of b： a的b次幂</p><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>我们可能很熟悉2的高次幂，但是我们可能熟悉数位中的隐藏信息，因此我们将十个数字染成不同颜色，并且将2的n次幂形成的数右对齐。</p><p>然后我们把这样子的数字一行一行累成一个直角三角形，从远方看，这个三角形的颜色（数字）是没有规律的。</p><p>但是如果我们只看几行，比如第1,10,100，1000……行，并且观测更多位数的时候，事情变的奇怪了。实验表明，2^(10^(n+1))的最后几位与2^(10^(n))完全形同，而且随着n的增加，完全相同的位数不断增加。</p><p>这表明，当n变大的时候，2的大幂正在收敛到某个确定的东西。</p><p>当然当n趋近于无穷大的时候这个数字是会不断变大，不会收敛的，但是这数位较小的这部分相同的数字序列是什么呢？这就是一种新的，我们平时用不到的数字系统。这个新的数字系统提供了实数的替代方案，并且在某些情况下有实用性。</p><hr><h2 id="逃离实数域"><a href="#逃离实数域" class="headerlink" title="逃离实数域"></a>逃离实数域</h2><p>就好像我们把很大的数字当成小的，小的数字当成大的（这段是感性的理解？）</p><p>在此之前，我们先思考一下为什么我们这么喜欢实数。首先实数可以轻松想象成数轴上的点。实数包含所有有理数、整数……支持四则运算，支持极限运算，即是稠密的。</p><p>但是实数也有一些缺点，比如实数并不包含-1的平方根。另外一方面，实数并不是唯一的数字系统，有一些系统拥有和实数相同的有用属性，在某些领域犹有过之，比如有些数字系统会包含-1的平方根。</p><p>这就是这次的主角，p进数系统。p是个质数</p><p>要理解p进数，先从10的幂而不是2的幂开始。</p><p>当10^n中的n不断变大的时候，所有数的n位以下的数字都会变成0，所以我们可以理解为这个数越来越接近于0，我们把它连接诶成一个越来越“小”的数。我们定义一个判断p进数位数的定义：（能整除p的最大次方数）分之一。</p><p>定义为：10-adic absolute value，下面假设这个词叫绝对值（大概不叫这个，但是我宁可说一个典型错的，也不要造一个可能是错的词语，不过也不一定，毕竟视频里面用的真的是绝对值的符号带上下标p）实际上表示的意义是这个p-adic数的大小。</p><p>例如：78000可以被1000整除但不能被10000整除，因此它的10进整数的“绝对值”是实数的1&#x2F;1000。</p><p>同理10亿的绝对值是1&#x2F;10^9</p><p>通常绝对值对应着数轴上的距离，给了我们一张定义数字大小的方法。定义中，大小接近于0的实数在该系统中是小的。当你取更大的n时，你会更加“接近”0，也就是说数字会更“小”。也就是说在10进整数中，10亿是一个很小的数字。虽然它实际上很大，但是我们正在改变对于大小的基本定义。</p><p>大小的概念本来与实数相关，因此我们如果选择不同的大小概念，那么大和小将会有完全不同的含义。实数的绝对值很好的对应了数轴上和0的距离，当两个数字的前几位相同的时候，说明两个数字很接近。</p><p>但是10进整数系统和数轴无关。在10进整数系统下，当两个数字的租后几位相同时，我们认为两个数字接近。比如10亿和0有9位数字是相同的，他们相当接近。</p><p>所以这让我们对10进数的理解成为可能，2^(10^n)不是趋近于无穷大的数，而是一个10进整数。我们可以近似的看成x&#x3D;10的多项式，其中每一个参数 $a_i$ 都是0~9之间的数字。</p><p>例如，2^(10^n)的极限是6, 7, 3, 9, 0, 1等的10进数。我们可以用0来扩展更高位所以这个多项式可以一直往高位写，就像实数中对π或者e的无穷展开式一样。我们认为在10进制中，10的幂是发散的。但是在10进数中10的幂不断变小，收敛于0.如果还不能理解，我们可以把10的幂放在分母中，次数取相反数来形象的写成展开式的样子。为此分母变成了负指数。<br>$$<br>\lim_{n\to 0} 2^{10^n}&#x3D;… + 1\times 10^5 + 0\times 10^4 + 3 \times 10^2 + 7 \times 10 + 6<br>$$<br>本质上10进数仍然是一个整数，但是你允许数字无限向左移动。现在我们来确认一下10进数有哪些性质，类比上文中实数所拥有的优良性质。首先10进数没有数轴，或者要构造一个不合常理的数轴，我们把1000放在接近0的位置，100,000放在更加接近0的位置，以此类推。但是我们需要注意不同10进整数可以具有相同的大小。比如，78000和35000的大小都是1&#x2F;1000.由于没有相应的数轴，所以也就没有正负的概念。在几何意义上的缺失使得10进数有悖常理，所以我们要重建我们的直觉（这句话重复了好几遍了）。</p><p>所幸10进数有自己的加减法则。与整数中从左往右的加法方向相反，10进数的加法是从右往左的。（这句话暂时不知道怎么理解）</p><p>举例：99999+1&#x3D;0，所以99999 &#x3D; -1</p><p>也就是说我们可以证明10进整数包含所有负整数</p><p>同理10进数也有自己的乘法法则，比如$66667 \times 3 &#x3D; 1$，也就是说$66667 &#x3D; \frac{1}{3}$。 因此即使是一些有理数也包含在10进整数中。但不是所有的有理数都被包含在10进整数之中了。</p><blockquote><p>我很遗憾之前似乎弄错了一个概念，在上面大部分对p进数的描述都是p进整数，事实上这个词确实存在，定义的是p进数的类实数展开中没有正次分母项的p进数。</p></blockquote><p>比如$\frac{1}{300}$就可以分解成$ \frac{1}{300} &#x3D; \frac{1}{3} \times frac{1}{10}^2$所以这个数可以写成这样：<br>$$<br>\frac{1}{300} &#x3D;  ….66667 \times \frac{1}{10}^2 &#x3D;  …. + \frac{6}{10^{-2}} + \frac{6}{10^{-1}} + \frac{6}{10^{0}} + \frac{6}{10^{1}} + \frac{7}{10^{2}}<br>$$<br>这样，我们可以用p进数（在这里p进整数扩大成了p进数）表示出所有的有理数。</p><p>最后我们希望完善除法，现在我们希望知道是不是所有的10进数都可以做除数（哪怕它们不是0），答案是确实不是所有的10进数都可以做除数。当然如果用质数代替10，这个问题会消失。</p><p>下面讲一下这个问题：我们假设$\lim_{n\to 0} 2^{10^n} &#x3D; x_n$，则我们可以构造一个矛盾。</p><p>当n变大的时候$x_n \sim x_{n+1}$</p><p>也就是说$x^10 &#x3D; x $</p><p>但是经过验证我们可以发现$x^2 &#x3D; x$这说明$x \times (x - 1) &#x3D; 0$但事实上x和x-1都不是0.</p><p>这里可以构造出矛盾：如果x可以作为除数，则应有$\frac{x}{x} &#x3D; 1$但是两边如果同乘以x-1，则左边变成0，右边变成x-1 ，这与事实不符。</p><p>至于为什么质数p可以避开这个问题视频避开不谈，我更不可能会。而且从2到p-1的数字完美配对，能得到不重不漏的数字，它们的积除以p的余数是1。</p><p>综上所述，p进数和实数相比，它没有数轴，也没有bestname(?)。但是它包含所有整数，支持四则运算，也包含所有有理数。和实数一样稠密，只要位数足够多，每个数字都是确定的，因此p进数有极限。</p><hr><h2 id="负数的平方根"><a href="#负数的平方根" class="headerlink" title="负数的平方根"></a>负数的平方根</h2><p>如果我们令p等于5，我们应当将各个幂用5进制表示。</p><p>同样设$\lim_{n\to 0} 2^{5^n} &#x3D; x_n $</p><p>由极限的性质可以知道$x^5 &#x3D; x $</p><p>经计算可以发现$x^2 &#x3D; -1 $</p><p>这个形式很像虚数，这与实数系统完全不同。因为在实数中没有数是-1的平凡根，但是在5进数系统中有。</p><p>我们还可以经过计算证明：由$x^5 &#x3D; x$可以因式分解得到：<br>$$<br>( x - 1 ) \times x \times ( x + 1 ) \times ( x^2 + 1 ) &#x3D; 0<br>$$<br>由于x-1，x，x+1均不为0且除法在5进数中是合法的，因此至少有一个因子是0，由此可以知道$ x^2 &#x3D; -1 $</p><hr><h2 id="斐波那契的收敛"><a href="#斐波那契的收敛" class="headerlink" title="斐波那契的收敛"></a>斐波那契的收敛</h2><p>我们考察斐波那契数列的第$2^n$项。这个2进数下本身是不收敛的，但是如果我们隔行检查，会发现两部分分别收敛了。所以两个极限分别是某负数的一个平方根。</p><p>设$\lim_{n\to 0} 2^n &#x3D; x_n $</p><p>则<br>$$<br>5 \times x_n^2 + 3 &#x3D; 0<br>\<br>5 \times x_{n+1}^2 + 3 &#x3D; 0<br>$$<br>那么这为我们讨论在2-adic中-1的平方根提供了思路。</p><p>-1&#x3D;1111111…11所以我们希望得到的乘积是全部数位为1的数。讨论个位，只有$1 \times 1 &#x3D; 1$才能满足要求，不能为0.</p><p>讨论第二位，如果为0，则$1 \times 0 + 0 \times 1 &#x3D; 0$不是我们想要的，所以不能是0。如果是1，则$1 \times 1 + 1 \times 1 &#x3D; 2$即得到0并且进位，均不满足，因此在2-adic系统中没有-1的平方根。</p><p>我们可以再考察一下p&#x3D;3，发现也没有解。但是p&#x3D;5是有解的。我们可以自己尝试一下p&#x3D;7或者11等等的情况。（问就是我也没试过）</p><hr><h2 id="p-adic的应用"><a href="#p-adic的应用" class="headerlink" title="p-adic的应用"></a>p-adic的应用</h2><p>有一种数学问题，我们希望知道当n等于多少的时候$n^2 + 7 &#x3D; k \times 2^a$？其中n为遍历的值，从1到正无穷。即想知道n等于多少时左边的算式可以有2的高次幂因子。</p><p>思考：如果我们希望一个数能被2的高次幂整除，那么我们希望它在2-adic表示下的末尾有很多0.</p><p>换言之我们希望$n^2 + 7$在2-adic下趋近于0.</p><p>解方程可以得到$x &#x3D; \sqrt{-7}$。但是实际上2-adic数中是否包含-7的平方根是不确定的，但我们可以用牛顿二分法解出近似值。<br>$$<br>Newton’s method : f(x_0) &#x3D; 0 \Rightarrow f’(x) \times (x - x_0) &#x3D; f(x) - f(x_0)\<br>f(x) &#x3D; x^2 + 7\<br>x \rightarrow x - \frac{f(x)}{f’(x)} \rightarrow x - \frac{x^2 + 7}{2x}<br>$$<br>随机选择x计算结果，然后把结果赋给x，如此迭代。</p><p>在实数系统中这个x的数列其实并不收敛，因为它的意义是一个负数的平方根，在实数范围内并不存在。</p><p>但是由于2-adic支持除法，这些有理数也是2-adic数，而且这个数列确实2-adic收敛。我们可以得到一个数列，随机选取一个检验，发现确实是可以被2的高次幂整除。</p><hr><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>这就是padic数系统的优良性质。我们可以利用padic将有理数域扩大，使得极限、连续性和导数等性质适用。</p><p>似乎懂了很多东西，又似乎啥都没懂。如果要应用的话，我会把月赛的adic写成这个形式，但是没成功</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#leak = pow(g, bytes_to_long(s2), p^666)</span><span class="token keyword">import</span> os<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>g <span class="token operator">=</span> <span class="token number">60481606253840272416608492349866939317114665311741132450767745324720776050313</span>p <span class="token operator">=</span> <span class="token number">101202160159081561029549739902097099275439197324107563340103725793005952286427</span>leak <span class="token operator">=</span> <span class="token numberspan>Qpp <span class="token operator">=</span> Qp<span class="token punctuation">(</span>p<span class="token punctuation">,</span> prec<span class="token operator">=</span><span class="token number">666</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span> Qpp<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>Qpp<span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">,</span>Qpp<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> leak <span class="token punctuation">)</span> <span class="token operator">/</span> Qpp<span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>lift<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>Qpp<span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">,</span> Qpp<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> Qpp<span class="token punctuation">(</span>leak<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>lift<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span> long_to_bytes<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">)</span>        quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#exponential does not converge</span><span class="token comment">#It seems that the first s is too large.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里我们要解决的是一个离散对数的问题，由于数字非常的大，我觉得是这个原因导致二分法的不适用。但是解方程一定要用二分法吗？在这里我猜测.log()函数就是用于求数字在p-adic中的ln值，根据之前的我们试图用p进数表示有理数的操作来说这个似乎是可以逼近的。还有lift函数在这里应该是将p-adic转换成整型。那么契税这个对数的方程我们可以暂时不去看离散（因为我们用系数都是整数的p-adic表示了有理数，而且自带了范围）我们暂时只看对数，那么<br>$$<br>\log_a^b &#x3D; \ln a&#x2F;\ln b<br>$$<br>在p-adic中，这个数是是可以直接计算的。也就是说我们可以求出无限趋近于0的p-adic数，正巧这个数在666次内。</p><p>至于最后那个ecdlp，似乎还有一些别的东西混进去了……</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown个人手册</title>
      <link href="/2023/02/24/markdown-ge-ren-shou-ce/"/>
      <url>/2023/02/24/markdown-ge-ren-shou-ce/</url>
      
        <content type="html"><![CDATA[<h1 id="零碎记录"><a href="#零碎记录" class="headerlink" title="零碎记录"></a>零碎记录</h1><p>如果想要在vscode中编辑markdown文档主要是在后期修改整合文件的时候，从无到有还是typora比较香吧。所以下面记录的用法应该会分为vscode场景和typora场景。两者还是有比较大的不同的。毕竟markdown的初衷是双手不离开键盘完成沉浸式的创作，我希望能通过这些不算难记的快捷键来尽可能实现这一点。</p><h2 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h2><h3 id="即时渲染"><a href="#即时渲染" class="headerlink" title="即时渲染"></a>即时渲染</h3><p>如果要在vscode中即时渲染，可以先Ctrl+k，松开之后按v。</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><blockquote><p>#在行首可以让这行变成标题，1~6个#可以分别表示一级到六级越来越小的6个标题。</p></blockquote><p>但是#如果不在行首则正常显示，而且#结束之后应当加上一个空格。</p><p>还有一种方法是</p><blockquote><p>一级标题&#x3D;&#x3D;&#x3D;</p><p>二级标题—</p></blockquote><p>但是必须在行首</p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>连续使用三个*或者-作为单独一行，但是为避免和标题的第二种表示方式混淆，可以在—的中间或者前面加上空格。</p><h3 id="斜体和粗体"><a href="#斜体和粗体" class="headerlink" title="斜体和粗体"></a>斜体和粗体</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span><span class="token content">斜体</span><span class="token punctuation">*</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">粗体</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">又斜又粗</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token strike"><span class="token punctuation">~~</span><span class="token content">被删除线划掉</span><span class="token punctuation">~~</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个符号在键盘左上角，shift＋·可食用</p><h3 id="超链接和图片"><a href="#超链接和图片" class="headerlink" title="超链接和图片"></a>超链接和图片</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">显示在上面的名字</span>](<span class="token url">对应的链接地址</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">显示在上面的名字</span>][<span class="token variable">1</span>]</span><span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 链接地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果是图片：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">图片名</span>](<span class="token url">链接地址</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>图片只比超链接多一个！</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>无序列表：使用+-*加上空格，可以嵌套</p><p>有序列表就序号加.（英文句号）加上空格</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>把&gt;放在行首就会变成引用。</p><p><img src="https://img-blog.csdn.net/20180617105056177?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FmZWlfXw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="看看别人"></p><h3 id="行内代码块"><a href="#行内代码块" class="headerlink" title="行内代码块"></a>行内代码块</h3><p>其实上面已经用过很多次了，即使用 &#96; 表示，例如</p><p>扩展：很多字符是需要转义，使用反斜杠 \ 进行转义</p><h2 id="typora"><a href="#typora" class="headerlink" title="typora"></a>typora</h2><p>首先如果按照vscode的方式输入肯定是没问题的，但是typora还有很多方便的快捷键，如果你已经习惯了vscode的输入方式可能你不会觉得它们好用，但是如果你和我一样啥都不会并且接触到了typora，我想它不会让你失望。</p><p>你可以自行观察上面的导航栏，我的列出所有快捷键都是从上面导航栏的标记里面找到的。</p><h3 id="标题-1"><a href="#标题-1" class="headerlink" title="标题"></a>标题</h3><p>如果我们要表示标题，只需要使得光标在这一行，并且按住Ctrl+数字[1,6]，可以将这一行设置为各级标题。</p><h3 id="分割线-1"><a href="#分割线-1" class="headerlink" title="分割线"></a>分割线</h3><p>这个似乎没有专门的快捷键，在段落栏的下方有水平分割线，当然vscode中的三个—单独一行就能非常方便的作出水平分割线。</p><h3 id="斜体和粗体下划线删除线"><a href="#斜体和粗体下划线删除线" class="headerlink" title="斜体和粗体下划线删除线"></a>斜体和粗体下划线删除线</h3><p>都可以选定，右键菜单里面有，但是在我看来还不如打星号什么的。</p><h3 id="超链接和图片-1"><a href="#超链接和图片-1" class="headerlink" title="超链接和图片"></a>超链接和图片</h3><p>超链接直接复制链接地址然后选中超链接想显示的文字，然后Ctrl+k</p><p>图片我觉得直接拖拽进来就好了，vscode应该也可以。</p><h3 id="列表-1"><a href="#列表-1" class="headerlink" title="列表"></a>列表</h3><p>没有更好的替代方式</p><h3 id="引用-1"><a href="#引用-1" class="headerlink" title="引用"></a>引用</h3><p>Ctrl+shift+Q</p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>Ctrl+shift+K</p><p>但如果是行内的代码块就不知道了。按vscode的吧。</p><h3 id="公式块"><a href="#公式块" class="headerlink" title="公式块"></a>公式块</h3><p>Ctrl+shift+M</p><p>但是这个快捷键只能生成一个公式块的“块”，虽然说能进行一些简单公式的输入，但是关于符号还是非常的反人类。win+。可以打开编辑-表情与符号，可以找到数学符号，但是极度不好用，我宁可自己按照编程语言打上去让别人意会都懒得找这个符号。关于数学公式的正统输入我觉得可以单独写。</p><h2 id="公式输入"><a href="#公式输入" class="headerlink" title="公式输入"></a>公式输入</h2><p><a href="https://gemini-yang.blog.csdn.net/article/details/104878759">Markdown公式、符号总结</a></p><p>这坑太大了，填不动了……</p><p>行内公式用$公式$来表示，行间居中公式用两边各两个。</p>]]></content>
      
      
      <categories>
          
          <category> usage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>itertools库函数</title>
      <link href="/2023/02/24/itertools-ku-han-shu/"/>
      <url>/2023/02/24/itertools-ku-han-shu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/51003123">详解Python中的itertools模块</a></p><p><a href="https://www.cnblogs.com/ai594ai/p/15930579.html">itertools详解</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链接引用</title>
      <link href="/2023/02/24/lian-jie-fen-xiang/"/>
      <url>/2023/02/24/lian-jie-fen-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="链接引用合集"><a href="#链接引用合集" class="headerlink" title="链接引用合集"></a>链接引用合集</h1><p>在我自己学习的时候总是能遇到很多前辈给我的各种各样的帮助，但是我本身并不是计算机专业出身，有很多规矩也不清不楚，只是带着爱好想从密码想庞大的计算机领域管中窥豹。就比如我常常在写blog的时候写完了准备引用的时候才发现自己参考的别人的blog链接忘记放了，历史记录又常常乱如垃圾场，最后干脆摆烂。事实上我看到了很多自己一次性没发吃透的blog，它们不应当被丢在历史记录的垃圾堆中被遗忘，更不应该在我需要的时候只能从搜索引擎中被找到。所以我将本站的引用链接直接全部放在这里，在这里也会的链接也可能会在哪一天被我吃透，成为我自己写的blog的一部分，我想在那个时候，我也会很开心，既写出了以前完全写不出的东西，也留下了前辈的印记。</p><p>记录在这里的链接没有品质或者难易度的先后，纯粹是我想起哪个就挂起哪个。</p><h2 id="笔记工具"><a href="#笔记工具" class="headerlink" title="笔记工具"></a>笔记工具</h2><p><a href="https://blog.csdn.net/afei__/article/details/80717153?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167720862616782429774329%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167720862616782429774329&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-80717153-null-null.142%5Ev73%5Econtrol,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&utm_term=markdowm&spm=1018.2226.3001.4187">Markdown语法</a></p><p><a href="https://gemini-yang.blog.csdn.net/article/details/104878759">Markdown公式、符号总结</a></p><p><a href="https://blog.csdn.net/qq_59134387/article/details/126843818">Ubuntu 20.04系统安装</a></p><p><a href="https://blog.csdn.net/A33280000f/article/details/128052272">Ubuntu 20.04系统中Sage（sagemath）安装及使用详细过程</a></p><h2 id="latex环境配置"><a href="#latex环境配置" class="headerlink" title="latex环境配置"></a>latex环境配置</h2><p><a href="https://zhuanlan.zhihu.com/p/41855480/">最新TeXLive 环境的安装与配置</a></p><p><a href="https://blog.csdn.net/Ruins_LEE/article/details/123555016?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170532494516800211574544%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170532494516800211574544&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123555016-null-null.142%5Ev99%5Epc_search_result_base3&utm_term=LaTeX%20vscode&spm=1018.2226.3001.4187">vscode中配置latex</a>不过后来为了更好的配合学校老师发的模版，我已经换成了ctex，删掉了texlive。</p><h2 id="office全家桶安装"><a href="#office全家桶安装" class="headerlink" title="office全家桶安装"></a>office全家桶安装</h2><p><a href="https://b23.tv/NViEw7f">office tool plus</a></p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> temp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python个人手册</title>
      <link href="/2023/02/24/python-ge-ren-shou-ce/"/>
      <url>/2023/02/24/python-ge-ren-shou-ce/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="python个人手册"><a href="#python个人手册" class="headerlink" title="python个人手册"></a>python个人手册</h1><h2 id="编码相关"><a href="#编码相关" class="headerlink" title="编码相关"></a>编码相关</h2><h3 id="byte编码"><a href="#byte编码" class="headerlink" title="byte编码"></a>byte编码</h3><p>decode：默认utf-8，将bytes直接转换成string</p><p>decode：同上，将string转换成bytes</p><p>所以，以上情况下只是简单的储存格式改变，但是如果用了别的编码格式就不一样了。</p><h3 id="int函数"><a href="#int函数" class="headerlink" title="int函数"></a>int函数</h3><p>本来有个int函数的，可以转换成十进制整型，可以加上一个表示原来是几进制的数字，当然没有也可以。</p><p>这个是另外一种，但也不需要引入库。</p><p>bytes是要转换的十六进制；</p><p>byteorder：选’big’和’little’，以上例为例，其中big代表正常顺序，即f1ff。little反之，代表反序fff1；</p><p>signed：选True、Flase表示是否要区分二进制的正负数含义。即是否要对原二进制数进行原码反码补码操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token string">b'\xf1\xff'</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'big'</span><span class="token punctuation">,</span> signed<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">,</span> signed<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#输出：</span><span class="token number">61951</span><span class="token operator">-</span><span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对齐函数"><a href="#对齐函数" class="headerlink" title="对齐函数"></a>对齐函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>width<span class="token punctuation">,</span>fillchar<span class="token punctuation">)</span>s1 <span class="token operator">=</span> <span class="token string">b'asf'</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#.......asf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ljust同理。</p><h3 id="索引函数"><a href="#索引函数" class="headerlink" title="索引函数"></a>索引函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>ind <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>ind<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set函数"><a href="#set函数" class="headerlink" title="set函数"></a>set函数</h3><p>创造set数据，是一个无序不重复集合，以花括号表示，可以进行差集交集并集的操作，增删集合内元素用add和remove等来操作。</p><h3 id="split函数"><a href="#split函数" class="headerlink" title="split函数"></a>split函数</h3><p>切割字符串形成数组，默认切割的是空格。</p><h3 id="join函数"><a href="#join函数" class="headerlink" title="join函数"></a>join函数</h3><p>将数组的内容相连。</p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><ul><li><h4 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h4></li></ul><p>按位与运算，只有同为1的时候输出的结果才为1.</p><blockquote><p>1 &amp; 1 &#x3D; 1</p><p>1 &amp; 0 &#x3D; 0</p><p>0 &amp; 0 &#x3D; 0</p></blockquote><p>常用语if语句，由于if只要大于零就算true进入循环，因此可以设置特定的数据，达到判断输入的数字的二进制位数哪一位是1，只要有一位满足要求就通过。</p><p>eg: 如果是0x80则只有第8位有可能为真，即检查第8位是否为1，是则进入if语句</p><ul><li><h4 id=""><a href="#" class="headerlink" title="|"></a>|</h4></li></ul><p>按位或运算，只要两个数的相应位置有一个1就输出1</p><blockquote><p>1 | 1 &#x3D; 1</p><p>1 | 0 &#x3D; 1</p><p>0 | 0 &#x3D; 0</p></blockquote><ul><li><h4 id="-1"><a href="#-1" class="headerlink" title="^"></a>^</h4></li></ul><p>按位异或，对应数位不同则输出1，相同则输出0</p><blockquote><p>1 ^ 1 &#x3D; 0</p><p>1 ^ 0 &#x3D; 1</p><p>0 ^ 0 &#x3D; 0</p></blockquote><ul><li><h4 id="-2"><a href="#-2" class="headerlink" title="~"></a>~</h4></li></ul><p>求反运算，是单目运算符，字面意思。</p><h4 id="移位函数"><a href="#移位函数" class="headerlink" title="移位函数"></a>移位函数</h4><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">>></span>是右移，相当于整除以2&lt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>是左移，相当于乘以2</span><span class="token punctuation">></span></span><span class="token blockquote punctuation">></span>=和&lt;&lt;=就是移位之后赋值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h3><h4 id="Crypto-Util-number"><a href="#Crypto-Util-number" class="headerlink" title="Crypto.Util.number"></a>Crypto.Util.number</h4><h5 id="bytes-to-long"><a href="#bytes-to-long" class="headerlink" title="bytes_to_long"></a>bytes_to_long</h5><p>转换成ASCII码，一个字符占据一个字节。</p><p>eg: b’abc’ &#x3D;&gt; 97 * 2^16 + 98 * 2^8 + 99 * 2^0 &#x3D; 63821</p><h4 id="gmpy2"><a href="#gmpy2" class="headerlink" title="gmpy2"></a>gmpy2</h4><h5 id="gcd-xi"><a href="#gcd-xi" class="headerlink" title="gcd( xi )"></a>gcd( xi )</h5><p>可以放很多int数下去，求公因式</p><h4 id="binascii"><a href="#binascii" class="headerlink" title="binascii"></a>binascii</h4><p>chr():把一个整形转换成ASCII码表中对应的单个字符<br>ord():把ASCII码表中的字符转换成对应的整形<br>hex():把十进制转换成16进制字符<br>oct():把十进制转换成八进制字符<br>bin():把十进制整形转换成二进制字符</p><p>还有别的感觉没啥用。</p><h4 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h4><p>感觉也是同上，其实这些库函数的名字都比较好识别，我自己基本上不会用到，但是有时候看别人的脚本可能还是现场查算了。</p><h2 id="迭代器相关"><a href="#迭代器相关" class="headerlink" title="迭代器相关"></a>迭代器相关</h2><h3 id="map-function-iterable"><a href="#map-function-iterable" class="headerlink" title="map(function, iterable)"></a>map(function, iterable)</h3><p>会返回一个迭代器，一般与list函数配合使用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="reduce-function-iterable"><a href="#reduce-function-iterable" class="headerlink" title="reduce(function, iterable)"></a>reduce(function, iterable)</h3><p>是个python2的库函数，在python3被移到functools模块中，需要导入。</p><p>感觉和map差不多但是这个可以直接输出，比如配合add函数达到sum的效果×</p><h3 id="itertools库"><a href="#itertools库" class="headerlink" title="itertools库"></a>itertools库</h3><p>专门写一篇。</p><p>突然不想写了，世间事都那么无趣，总不是一句三分钟热度就有三分钟收获就可以自我安慰的。</p>]]></content>
      
      
      <categories>
          
          <category> usage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idaPro个人手册</title>
      <link href="/2023/02/24/idapro-ge-ren-shou-ce/"/>
      <url>/2023/02/24/idapro-ge-ren-shou-ce/</url>
      
        <content type="html"><![CDATA[<h1 id="IDA-特训营"><a href="#IDA-特训营" class="headerlink" title="IDA_特训营"></a>IDA_特训营</h1><p>IDA 7.7</p><p>Python 环境 3.8.x</p><p>课程必备插件</p><p>LazyIDA: <a href="https://github.com/P4nda0s/LazyIDA">https://github.com/P4nda0s/LazyIDA</a></p><p>Keypatch: <a href="https://github.com/keystone-engine/keypatch">https://github.com/keystone-engine/keypatch</a> （pip install keystone-engine）</p><p>将插件的 xxx.py 放到 IDA 目录的 plugins 目录</p><p>系统中有多个 python，使用 IDA 目录中的 idapyswitch.exe 切换</p><h2 id="IDA-特训1"><a href="#IDA-特训1" class="headerlink" title="IDA_特训1"></a>IDA_特训1</h2><ul><li><h2 id="空格键切换文本-x2F-图形模式-在图形模式中Ctrl-鼠标滚轮缩放，方便观察控制流-在文本模式中可以看到指令地址、指令间的线性关系、机器码"><a href="#空格键切换文本-x2F-图形模式-在图形模式中Ctrl-鼠标滚轮缩放，方便观察控制流-在文本模式中可以看到指令地址、指令间的线性关系、机器码" class="headerlink" title="空格键切换文本&#x2F;图形模式- 在图形模式中Ctrl+鼠标滚轮缩放，方便观察控制流- 在文本模式中可以看到指令地址、指令间的线性关系、机器码"></a>空格键切换文本&#x2F;图形模式<br>- 在图形模式中Ctrl+鼠标滚轮缩放，方便观察控制流<br>- 在文本模式中可以看到指令地址、指令间的线性关系、机器码</h2></li></ul>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>古典密码与编码</title>
      <link href="/2023/02/24/gu-dian-mi-ma-yu-bian-ma/"/>
      <url>/2023/02/24/gu-dian-mi-ma-yu-bian-ma/</url>
      
        <content type="html"><![CDATA[<p>在这里记录下我遇到的古典密码和各种现代编码。</p><p>[TOC]</p><h1 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h1><p>首先我们明确一点，关于古典密码其实本质上只有两种加密方式：置换和代换。前者指的是改变明文的排序，后者指的是用别的东西来代替明文中的字符。</p><p>目前我所知最全面的加解密应该是<a href="https://gchq.github.io/CyberChef/">Cyberchef</a>，这是一个在线的网站而且是英文的。基本上正儿八经的古典密码（不要整那种半整活性质的）都会有。<del>虽然我不怎么用</del></p><h2 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h2><p>$$<br>E(x) &#x3D; (ax + b), mod (m)\<br>D(x) &#x3D; a^{-1}(x - b), mod(m)\<br>$$</p><p>其中$a^-1$是a在modm下的乘法逆元。</p><h2 id="Atbash埃特巴什码"><a href="#Atbash埃特巴什码" class="headerlink" title="Atbash埃特巴什码"></a>Atbash埃特巴什码</h2><p>a变成z，b变成y，以此类推……加解密是同一个程序。</p><h2 id="Morse"><a href="#Morse" class="headerlink" title="Morse"></a>Morse</h2><p>Morse电码本来是只有英文版本的，但是也有利用Unicode编码中文的Morse出现。</p><p><a href="https://www.atool99.com/morse.php">在线网站</a></p><p>GitHub<a href="https://github.com/hustcc/xmorse">项目</a>（当然Java的项目我还不会用）</p><h1 id="现代编码"><a href="#现代编码" class="headerlink" title="现代编码"></a>现代编码</h1><p><a href="https://www.cmd5.com/">md5和sha系列</a></p><p><a href="http://www.factordb.com/index.php">大数分解</a></p><p><a href="https://quipqiup.com/">单表替换quipquip</a></p><p><a href="https://www.guballa.de/vigenere-solver">维吉尼亚密码</a></p><p><a href="https://www.qqxiuzi.cn/bianma/uuencode.php">Uuencode</a></p><p><a href="https://online-barcode-reader.inliteresearch.com/">扫码工具</a></p><h1 id="隐写术"><a href="#隐写术" class="headerlink" title="隐写术"></a>隐写术</h1><p><a href="https://www.mzy0.com/ctftools/zerowidth2/">零宽隐写</a></p>]]></content>
      
      
      <categories>
          
          <category> usage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LInux个人手册</title>
      <link href="/2023/02/24/linux-ge-ren-shou-ce/"/>
      <url>/2023/02/24/linux-ge-ren-shou-ce/</url>
      
        <content type="html"><![CDATA[<h1 id="LInux个人手册"><a href="#LInux个人手册" class="headerlink" title="LInux个人手册"></a>LInux个人手册</h1><p>[TOC]</p><h2 id="Ubuntu22-04拖拽文件复制粘贴"><a href="#Ubuntu22-04拖拽文件复制粘贴" class="headerlink" title="Ubuntu22.04拖拽文件复制粘贴"></a>Ubuntu22.04拖拽文件复制粘贴</h2><p>解决问题方式参照<a href="https://blog.csdn.net/qq_45060188/article/details/132154379?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-132154379-blog-125756573.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-132154379-blog-125756573.235%5Ev38%5Epc_relevant_anti_t3_base&utm_relevant_index=1">链接</a></p><pre class="line-numbers language-none"><code class="language-none">sudo gedit &#x2F;etc&#x2F;gdm3&#x2F;custom.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删掉WaylandEnable&#x3D;false这一行最开始的#号<br>重启虚拟机系统即可</p><h2 id="内存过满"><a href="#内存过满" class="headerlink" title="内存过满"></a>内存过满</h2><p>主要参照这个<a href="https://blog.csdn.net/qq_41918369/article/details/107416057">链接</a></p><h3 id="启动异常"><a href="#启动异常" class="headerlink" title="启动异常"></a>启动异常</h3><p>在卡死的界面按 Ctrl+Alt+F2 进入tty2，输入用户名和密码登录。如果不记得可以拿虚拟机名试试。这样可以命令行启动。</p><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p><a href="https://blog.csdn.net/qq_42427109/article/details/107882574">参考链接</a></p><pre class="line-numbers language-none"><code class="language-none">dfsudo apt-get autoremove<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>df命令查看剩余存储空间</p><p>后者是常用的自动清理指令。腾出空间重启应该就能正常启动了。</p><h3 id="扩容1"><a href="#扩容1" class="headerlink" title="扩容1"></a>扩容1</h3><p>关机后再虚拟机设置中选磁盘-扩展-最大磁盘大小-扩展-保存</p><p>使用gparted</p><pre class="line-numbers language-none"><code class="language-none">sudo apt install gpartedsudo gparted <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>右键选中分区，选择 更改大小&#x2F;移动。</p><h3 id="只读报错"><a href="#只读报错" class="headerlink" title="只读报错*"></a>只读报错*</h3><p>应该不是所有人都会遇到，但是不止我遇到了。<a href="https://blog.csdn.net/ningmengzhihe/article/details/127295333">解决方案</a></p><p>gparted中右键需要被resize磁盘，点击“信息”，在状态栏查看挂载位置信息。</p><blockquote><p>挂载于 &#x2F;, &#x2F;var&#x2F;snap&#x2F;firefox&#x2F;common&#x2F;host-hunspell</p></blockquote><p>也就是说有两个挂载位置</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;var&#x2F;snap&#x2F;firefox&#x2F;common&#x2F;host-hunspell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打开终端，进入root权限，重新挂载文件夹目录的读写权限，我这里系统挂载了两个目录，那么这两个目录都要重新挂载读写权限</p><pre class="line-numbers language-none"><code class="language-none">sudo -imount -o remount -rw &#x2F;mount -o remount -rw &#x2F;var&#x2F;snap&#x2F;firefox&#x2F;common&#x2F;host-hunspell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>GParted中刷新设备，然后就可以resize了。</p><h3 id="扩容2"><a href="#扩容2" class="headerlink" title="扩容2"></a>扩容2</h3><p>如果没有遇到只读报错则从扩容1跳到这里。</p><p>扩容后点击打勾的图标执行即可。</p><h2 id="Vi-x2F-Vim使用"><a href="#Vi-x2F-Vim使用" class="headerlink" title="Vi&#x2F;Vim使用"></a>Vi&#x2F;Vim使用</h2><p>默认情况下，Vim 打开时处于普通模式。其他模式按 <code>Esc</code> 键返回普通模式。按i进入输入模式。</p><p>按 <code>dd</code> 来删除当前行。<code>d</code> 是删除命令，<code>d</code> 后跟一个 <code>d</code> 表示删除一行。</p><p><strong>退出并保存</strong>：</p><ul><li>首先确保你处于普通模式（如果你在插入或可视模式下，按 <code>Esc</code> 键返回普通模式）。</li><li>然后，输入 <code>:wq</code> 命令并按 <code>Enter</code> 键。这里 <code>:w</code> 表示写入（保存），<code>:q</code> 表示退出。所以 <code>:wq</code> 表示保存并退出。</li></ul><p>不保存的情况下退出 Vim，可以使用 <code>:q!</code> 命令（强制退出，不保存更改）。</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intro</title>
      <link href="/2023/02/21/intro/"/>
      <url>/2023/02/21/intro/</url>
      
        <content type="html"><![CDATA[<p>This is my first personal blog ! I have expected it for such a long time . There will be two parts on the blog . One is some operations for using Hexo and Git so that I needn’t search it from others’ blog every time . The other part is my introduction.、</p><p>[TOC]</p><h2 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a>Operation</h2><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p>在博客文件夹中右键打开Git Bash Here 进入类似cmd的命令行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean：清除我之前生成的东西hexo g：hexo generate生成静态文章hexo s：浏览本地效果hexo d：hexo deploy部署文章hexo new post <span class="token string">"我的第一篇博客"</span>：新建一篇文章<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="front-matter"><a href="#front-matter" class="headerlink" title="front-matter"></a>front-matter</h3><pre class="line-numbers language-markdo" data-language="markdo"><code class="language-markdo">---title: Hexo+Github博客搭建记录date: 2022-05-08 15:15:44author: 爱笑的Gaoimg: &#x2F;medias&#x2F;banner&#x2F;7.jpg   #文章特征图coverImg: &#x2F;medias&#x2F;banner&#x2F;7.jpg  #首页轮播时的图片，如果没有则放特征图top: true  #是否置顶cover: true  #是否加入首页轮播封面toc: true #一种检索功能？password: 5f15b28ffe43f8be4f239bdd9b69af9d80dbafcb20a5f0df5d1677a120ae9110mathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要tags:- Hexo- Github- 博客categories:- 软件安装与配置---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上直接抄了教程，其中分类和标签的区别是分类有顺序性，也就是说不能改变分类categories的顺序，但是标签tags的顺序无所谓。但是以上两个都不适用于分页。</p><h3 id="默认布局"><a href="#默认布局" class="headerlink" title="默认布局"></a>默认布局</h3><p>默认布局分为post、page、draft。</p><h4 id="post"><a href="#post" class="headerlink" title="post"></a>post</h4><p>当你每一次使用代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new XXX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它其实默认使用的是post这个布局，也就是在source文件夹下的_post里面。</p><p>Hexo有三种默认布局：post、page和draft，它们分别对应不同的路径，而您自定义的其他布局和post相同，都将储存到source&#x2F;_posts文件夹。</p><p>而new这个命令其实是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只不过这个layout默认是post罢了。</p><h4 id="page"><a href="#page" class="headerlink" title="page"></a>page</h4><p>如果你想另起一页，那么可以使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page newpage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>系统会自动给你在source文件夹下创建一个newpage文件夹，以及newpage文件夹中的index.md，这样你访问的newpage对应的链接就是<a href="http://xxx.xxx/newpage">http://xxx.xxx/newpage</a></p><h4 id="draft"><a href="#draft" class="headerlink" title="draft"></a>draft</h4><p>draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new draft newdraft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样会在source&#x2F;_draft中新建一个newdraft.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server <span class="token parameter variable">--draft</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在本地端口中开启服务预览。</p><p>如果你的草稿文件写完了，想要发表到post中，</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo publish draft newdraft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就会自动把 newdraft.md 发送到post中。</p><h2 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h2><p>总是忘记，所以干脆在这里记下来。</p><pre class="line-numbers language-none"><code class="language-none">tags:- python- ida- install- hexo- linux- sagemathcategories:- usage or note- math or crypto or install or others<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><p>第一次配置的时候要先加上一个friend的page</p><p>之后的配置在source&#x2F;_data目录下的friend.json</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>搭建网站的教程和以上的所有技术向的部分均来自CSDN：《<a href="https://gaoziman.blog.csdn.net/article/details/124652412">Hexo+Github博客搭建教程</a>》</p><p>补充：虽然这篇教程提供了Windows和Linux两种操作系统的教程，但是我个人本来是想搭建Linux的，可惜这篇教程似乎主要在介绍Windows的部署方法，反正在Linux部署的过程中我被不知名的错误卡住了，但是我在Windows的搭建过程中几乎没有遇到阻碍，所以如果有人希望搭建在Linux平台的话我只能说无能为力，可能需要搜索更多的教程。</p><p>补充2：在更换主题的过程中我几乎将设置全部做完了才开始试运行，结果发现出来的界面是全空白，让我一度以为一天的时间白干了（因为我用了很多的时间去斟酌原来者的东西应当拿什么东西代替）后来发现推荐主题文件夹名字多了一个‘-master’，所以主题没能导入，删去即可，属于是虚惊一场了。</p><p>另外我的wp是在typora写的。曾经看别人用过vscode来写，但是在学习中（vscode的操作似乎更加依赖符号语言，但是我还不熟练）typora目前有个问题我觉得一直存在，就是虽然它能够用很多的快捷键来完成对类似公式块和别的东西的编辑，但是在typora上渲染成功的一些输入方式在网页上可能就会出现问题，甚至出现我的wp少了一部分但是我注意不到的情况。</p><p>补充3：我不太满意这个theme的副标题只有两条，因此决定去改源代码，vscode的在文件夹中查找非常好用，我通过锁定sub2变量出现找到了原函数，添加了sub3和sub:，于是副标题又多了两条。虽然我连这个theme的语言都不知道，但是写代码的人还是很有条理的。</p><p>补充4： 事实上在我看来可能是因为theme在不断更新的原因，在blog后半篇对主题的优化似乎已经失去了时效性，有一些已经在theme的说明中有了，剩下的似乎也不能成功，其中就包括我心心念念的磁贴，我甚至专门问了所有者能不能用别人的图做自己磁贴的表情包，但是没想到在自己的本地配置怎么都 过不去。或许Java、编译、前端什么的哪一个精通了都能快速解决这些问题，但我就一臭学数学的，我无能为力。</p><h3 id="about"><a href="#about" class="headerlink" title="about"></a>about</h3><p>下面这段本来是写在about.md的，但是发现在网页上似乎并不显示，于是放在了这里：</p><blockquote><p>我也不知道这段文字会出现在网页的哪个地方，也不知道该说什么。我想每一个第一次搭建个人blog的人都曾经想过在小小的电脑里面开辟属于自己的完美世界，就目前而言我还算顺利，希望这个blog能越来越完善。</p><p>在这个blog站中，我主要会记录几类内容：</p><ol><li>最主要的肯定是密码学，这是我目前想要搭建博客的“缘起”了。</li><li>其次可能会讲讲re的学习经历（但还没学），更主要的可能是记录一些不太常用但是好用的软件的使用方法。</li><li>最后可能会讲一些数学相关，毕竟我的专业是数学，在平时做题或者备考的过程中如果来了兴致可能会有。</li><li>剩下的可能会是一些杂谈，或者是在<del>垃圾堆里面刨食</del>在网上找资料时的一些心得。</li><li>在此时此刻我不认为自己应当在这个平台上分享关于个人的信息，不知道以后会不会。</li></ol></blockquote><p>搭建的事情可能到此结束了吧，其实折腾了一天也慢慢失去热情了。我只能说热情已经过去，留下的这些文档勉强算是我的收获，无所谓得失。</p><h3 id="复活记"><a href="#复活记" class="headerlink" title="复活记"></a>复活记</h3><p>2024-05-12</p><p>经历了几年的大学生活，电脑也换了一台，恍然间想起曾经奋进的我，不由得有些唏嘘。于是折腾了两天，把这个博客复活了。以前的资料乱如答辩我也懒得整理，只是在此告诫日后的自己，无论做什么最好都留下个文档记录自己怎么做的，以后想要复刻或者帮别人做也简单的很多。</p><p>如果想要再另一台电脑上重新复活你的博客，你最好拷贝了原来博客的整个文件夹，然后按照最开始搭建博客的<a href="https://blog.csdn.net/qq_58608526/article/details/124652412?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171542387316800222810589%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171542387316800222810589&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-124652412-null-null.142%5Ev100%5Epc_search_result_base4&utm_term=hexo%20github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2&spm=1018.2226.3001.4187">教程</a>和新一点的软件安装<a href="https://blog.csdn.net/itcast_cn/article/details/129876490?ops_request_misc=&request_id=&biz_id=102&utm_term=hexo%20github&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-129876490.nonecase&spm=1018.2226.3001.4187">教程</a>来把git和node装好，然后重新生成秘钥对连接就可以了。主题、默认设置很多都可以不用管了。如果你只拷贝了内容文件，那还是重新开一个blog吧。</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
          <category> install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
